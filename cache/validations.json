{
  "version": "3.2",
  "log": [
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "2ecab53632d5c724449077b6e67a7e3e51df279d42ebebba5d9c9558b4937f9b",
          "withoutMetadata": "91a6e3fcd6eafaf2ee1d3a8b4d7ad1d8f20e7265bc2b67102347a697e293a1f7",
          "linkedWithoutMetadata": "91a6e3fcd6eafaf2ee1d3a8b4d7ad1d8f20e7265bc2b67102347a697e293a1f7"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getOwnerUnlockTime()",
          "ownerLock(uint256)",
          "ownerUnlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "fundsAvailableForAdmin()",
          "availableToWithdraw(address)",
          "availableToWithdrawWithFee(address)",
          "unavailableToWithdraw(address)",
          "unavailableToWithdrawWithFee(address)",
          "currentPendingBalanceOf(address)",
          "currentTotalPending()",
          "approve(address,uint256)",
          "withdrawOnBehalfOf(address,uint256)",
          "collectOnBehalfOf(address)",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialMinusFeeOnBehalfOf(address)",
          "withdraw(uint256)",
          "collect()",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitialMinusFee()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)",
          "adminChangeFeeWallet(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "feeWallet",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "297487cff30eb1eb0e8de48f0e73b035c156756689271e2f228569ca8ceb00e2",
          "withoutMetadata": "dc0b8d86c95b68a53c0671ec8fc13ba5d0dd6405fd21bece9f194638cd73fa30",
          "linkedWithoutMetadata": "dc0b8d86c95b68a53c0671ec8fc13ba5d0dd6405fd21bece9f194638cd73fa30"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getOwnerUnlockTime()",
          "ownerLock(uint256)",
          "ownerUnlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "fundsAvailableForAdmin()",
          "availableToWithdraw(address)",
          "availableToWithdrawWithFee(address)",
          "unavailableToWithdraw(address)",
          "unavailableToWithdrawWithFee(address)",
          "currentPendingBalanceOf(address)",
          "currentTotalPending()",
          "approve(address,uint256)",
          "withdrawOnBehalfOf(address,uint256)",
          "collectOnBehalfOf(address)",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialMinusFeeOnBehalfOf(address)",
          "withdraw(uint256)",
          "collect()",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitialMinusFee()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)",
          "adminChangeFeeWallet(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "feeWallet",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "8162ace8e414a8b0bb169229659ff8a9529645499c4deec4b2bc0ae47d782373",
          "withoutMetadata": "c8689edaee0fe757a96b6610955284c8990ea6a4af07b4bec003758359d15db5",
          "linkedWithoutMetadata": "c8689edaee0fe757a96b6610955284c8990ea6a4af07b4bec003758359d15db5"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "fundsAvailableForAdmin()",
          "availableToWithdraw(address)",
          "availableToWithdrawWithFee(address)",
          "unavailableToWithdraw(address)",
          "unavailableToWithdrawWithFee(address)",
          "currentPendingBalanceOf(address)",
          "currentTotalPending()",
          "approve(address,uint256)",
          "withdrawOnBehalfOf(address,uint256)",
          "collectOnBehalfOf(address)",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialMinusFeeOnBehalfOf(address)",
          "withdraw(uint256)",
          "collect()",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitialMinusFee()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)",
          "adminChangeFeeWallet(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "feeWallet",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "2c8565b06a57a513e86638f976aa7b90881deba59ff5c501e29d10af6d2df3e7",
          "withoutMetadata": "196ee157da8c9b970cb32f406d07b45d43288a3aab231cc02c561258738753bc",
          "linkedWithoutMetadata": "196ee157da8c9b970cb32f406d07b45d43288a3aab231cc02c561258738753bc"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "fundsAvailableForAdmin()",
          "availableToWithdraw(address)",
          "availableToWithdrawWithFee(address)",
          "unavailableToWithdraw(address)",
          "unavailableToWithdrawWithFee(address)",
          "currentPendingBalanceOf(address)",
          "currentTotalPending()",
          "approve(address,uint256)",
          "withdrawOnBehalfOf(address,uint256)",
          "collectOnBehalfOf(address)",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialMinusFeeOnBehalfOf(address)",
          "withdraw(uint256)",
          "collect()",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitialMinusFee()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)",
          "adminChangeFeeWallet(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "feeWallet",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "33c377acbe7acab8e7b67ed96bb4118f4bfaf4b689090f970c6b5853bc8488a3",
          "withoutMetadata": "951bd375de6914388b078adb4ed7605d69d2810a6585271d382c101705b38442",
          "linkedWithoutMetadata": "951bd375de6914388b078adb4ed7605d69d2810a6585271d382c101705b38442"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "fundsAvailableForAdmin()",
          "availableToWithdraw(address)",
          "availableToWithdrawWithFee(address)",
          "unavailableToWithdraw(address)",
          "unavailableToWithdrawWithFee(address)",
          "currentPendingBalanceOf(address)",
          "currentTotalPending()",
          "approve(address,uint256)",
          "withdrawOnBehalfOf(address,uint256)",
          "collectOnBehalfOf(address)",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialMinusFeeOnBehalfOf(address)",
          "withdraw(uint256)",
          "collect()",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitialMinusFee()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)",
          "adminChangeFeeWallet(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "feeWallet",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "5dcb4b193aaf743e05a2f8394cd4e547f5fb1bfef2a0d7c2446793a1ed64e198",
          "withoutMetadata": "7256bf08b374d30df73c4c71e9ff85d5e04364fe14305dee884481770005b3e9",
          "linkedWithoutMetadata": "7256bf08b374d30df73c4c71e9ff85d5e04364fe14305dee884481770005b3e9"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "fundsAvailableForAdmin()",
          "availableToWithdraw(address)",
          "availableToWithdrawWithFee(address)",
          "unavailableToWithdraw(address)",
          "unavailableToWithdrawWithFee(address)",
          "currentPendingBalanceOf(address)",
          "currentTotalPending()",
          "approve(address,uint256)",
          "withdrawOnBehalfOf(address,uint256)",
          "collectOnBehalfOf(address)",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialMinusFeeOnBehalfOf(address)",
          "withdraw(uint256)",
          "collect()",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitialMinusFee()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)",
          "adminChangeFeeWallet(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "feeWallet",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "998f6a0be84f06144369469000762890cc57cb05a54bb8413c1aaddaeb1f7b8a",
          "withoutMetadata": "997ba88ad0c3b08bea929a717d159307a1b371925ee98c5d8a6afe6eda490e1d",
          "linkedWithoutMetadata": "997ba88ad0c3b08bea929a717d159307a1b371925ee98c5d8a6afe6eda490e1d"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "fundsAvailableForAdmin()",
          "availableToWithdraw(address)",
          "availableToWithdrawWithFee(address)",
          "unavailableToWithdraw(address)",
          "unavailableToWithdrawWithFee(address)",
          "currentPendingBalanceOf(address)",
          "currentTotalPending()",
          "approve(address,uint256)",
          "withdrawOnBehalfOf(address,uint256)",
          "collectOnBehalfOf(address)",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialMinusFeeOnBehalfOf(address)",
          "withdraw(uint256)",
          "collect()",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitialMinusFee()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)",
          "adminChangeFeeWallet(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "feeWallet",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "44457ad76f6f75b62e2ab5261fdaebcf742718b49df3ef87180f438f9890a900",
          "withoutMetadata": "5478c8405f35dca84c354cbd86fe16ee19d57b09d284cc0c1e852adcdd0699df",
          "linkedWithoutMetadata": "5478c8405f35dca84c354cbd86fe16ee19d57b09d284cc0c1e852adcdd0699df"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "fundsAvailableForAdmin()",
          "availableToWithdraw(address)",
          "availableToWithdrawWithFee(address)",
          "unavailableToWithdraw(address)",
          "unavailableToWithdrawWithFee(address)",
          "currentPendingBalanceOf(address)",
          "currentTotalPending()",
          "approve(address,uint256)",
          "withdrawOnBehalfOf(address,uint256)",
          "collectOnBehalfOf(address)",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialMinusFeeOnBehalfOf(address)",
          "withdraw(uint256)",
          "collect()",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitialMinusFee()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)",
          "adminChangeFeeWallet(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "feeWallet",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "cdafa5733e15e3bb34ab6b4b43e16012c683f4660401ea9a905002df80989c33",
          "withoutMetadata": "2333d0eddf3a8d9a36a02f498db218059d31032b6b12478f233021a7074db72d",
          "linkedWithoutMetadata": "2333d0eddf3a8d9a36a02f498db218059d31032b6b12478f233021a7074db72d"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "fundsAvailableForAdmin()",
          "availableToWithdraw(address)",
          "availableToWithdrawWithFee(address)",
          "unavailableToWithdraw(address)",
          "unavailableToWithdrawWithFee(address)",
          "currentPendingBalanceOf(address)",
          "currentTotalPending()",
          "approve(address,uint256)",
          "withdrawOnBehalfOf(address,uint256)",
          "collectOnBehalfOf(address)",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialMinusFeeOnBehalfOf(address)",
          "withdraw(uint256)",
          "collect()",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitialMinusFee()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)",
          "adminChangeFeeWallet(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "feeWallet",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "10c9d85b1c3d4f0f035221f47c3f54e96c6d3cd269d6226120cb7a7fb4948a2b",
          "withoutMetadata": "7e3de34f92ebbf675bc447847cc6a516f2ad7d7963dc7bcdb9250c3ab7dee424",
          "linkedWithoutMetadata": "7e3de34f92ebbf675bc447847cc6a516f2ad7d7963dc7bcdb9250c3ab7dee424"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "fundsAvailableForAdmin()",
          "availableToWithdraw(address)",
          "availableToWithdrawWithFee(address)",
          "unavailableToWithdraw(address)",
          "unavailableToWithdrawWithFee(address)",
          "currentPendingBalanceOf(address)",
          "currentTotalPending()",
          "approve(address,uint256)",
          "withdrawOnBehalfOf(address,uint256)",
          "collectOnBehalfOf(address)",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialMinusFeeOnBehalfOf(address)",
          "withdraw(uint256)",
          "collect()",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitialMinusFee()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)",
          "adminChangeFeeWallet(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "feeWallet",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "c8ae69eb68ea4e7beb9aa88a33870bbc642ae86e2be6405b6075ada8dcf89787",
          "withoutMetadata": "6aba5fe8bfed11dc7a019e3f24058409308fb11f6abd46cc1b67cdd9f9c3f9db",
          "linkedWithoutMetadata": "6aba5fe8bfed11dc7a019e3f24058409308fb11f6abd46cc1b67cdd9f9c3f9db"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableToWithdraw(address)",
          "availableToWithdrawWithFee(address)",
          "unavailableToWithdraw(address)",
          "unavailableToWithdrawWithFee(address)",
          "approve(address,uint256)",
          "withdrawOnBehalfOf(address,uint256)",
          "collectOnBehalfOf(address)",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialMinusFeeOnBehalfOf(address)",
          "withdraw(uint256)",
          "collect()",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitialMinusFee()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "d82f966cdd254cbec67dd38c5db5c4b2d43894542a9e53e7104435cef2b27af0",
          "withoutMetadata": "0b1d0224bb0d4647d6ad1fc46cce3a703f25eb82de2166ccb998f3673463a816",
          "linkedWithoutMetadata": "0b1d0224bb0d4647d6ad1fc46cce3a703f25eb82de2166ccb998f3673463a816"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableToWithdraw(address)",
          "availableToWithdrawWithFee(address)",
          "unavailableToWithdraw(address)",
          "unavailableToWithdrawWithFee(address)",
          "approve(address,uint256)",
          "withdrawOnBehalfOf(address,uint256)",
          "collectOnBehalfOf(address)",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "withdraw(uint256)",
          "collect()",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "2ac5b5db6a6e17b96ec4d39e167b11dc7db592a5c9a146be698b27bfb4b9439b",
          "withoutMetadata": "05cda7512b3a9245a2456e1199bf6fdfae9f15d177e3ce349bf59e46c323ceab",
          "linkedWithoutMetadata": "05cda7512b3a9245a2456e1199bf6fdfae9f15d177e3ce349bf59e46c323ceab"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableToWithdraw(address)",
          "availableToWithdrawWithFee(address)",
          "unavailableToWithdraw(address)",
          "unavailableToWithdrawWithFee(address)",
          "approve(address,uint256)",
          "withdrawOnBehalfOf(address,uint256)",
          "collectOnBehalfOf(address)",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "withdraw(uint256)",
          "collect()",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "ba3ec21656bdbdf7480540cb8374bb8cb8f780b2b5b19c606a2568031b0c9956",
          "withoutMetadata": "40a0ab077871b0769b47530d3e5893797a87d5a5dbb19458a7665a75e6591f0a",
          "linkedWithoutMetadata": "40a0ab077871b0769b47530d3e5893797a87d5a5dbb19458a7665a75e6591f0a"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableToWithdrawWithFee(address)",
          "availableToWithdraw(address)",
          "approve(address,uint256)",
          "withdrawOnBehalfOf(address,uint256)",
          "collectOnBehalfOf(address)",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "withdraw(uint256)",
          "collect()",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "2c0c98e273f2c97ee4168f8f18be0f58cfcca83b5bea4b4339660eb29e787fc9",
          "withoutMetadata": "77094c0e2f76e398da8109e706e124a9e62d70c5a3cac4a1deff054a618012dd",
          "linkedWithoutMetadata": "77094c0e2f76e398da8109e706e124a9e62d70c5a3cac4a1deff054a618012dd"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableToWithdrawWithFee(address)",
          "availableToWithdraw(address)",
          "approve(address,uint256)",
          "withdrawOnBehalfOf(address,uint256)",
          "collectOnBehalfOf(address)",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "withdraw(uint256)",
          "collect()",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "c8ffeaf4ef7def99ac7cef6be22df33d1c6c7028c09690a637b2bf391ae49243",
          "withoutMetadata": "754c68282744facd88c19aeff9595f908551c604a81892c4dd912f4786755cc2",
          "linkedWithoutMetadata": "754c68282744facd88c19aeff9595f908551c604a81892c4dd912f4786755cc2"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "d0bda15f2583312c6b234ebb0070541e70e1b54141de597d9c2dc5a007323404",
          "withoutMetadata": "9c98f21d54260e64f085663e886a76634fc3c3dc0c3ad0a949d6030e7cc294fb",
          "linkedWithoutMetadata": "9c98f21d54260e64f085663e886a76634fc3c3dc0c3ad0a949d6030e7cc294fb"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "45a721166b948d8cb8ebcd62fbba9ae6e1b0844f4930fd0031f4a46b5665989f",
          "withoutMetadata": "5bad62fa1fec8117345ec14afdde064a5ffc240c7098dba26007f71f69bc033c",
          "linkedWithoutMetadata": "5bad62fa1fec8117345ec14afdde064a5ffc240c7098dba26007f71f69bc033c"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "d0bda15f2583312c6b234ebb0070541e70e1b54141de597d9c2dc5a007323404",
          "withoutMetadata": "9c98f21d54260e64f085663e886a76634fc3c3dc0c3ad0a949d6030e7cc294fb",
          "linkedWithoutMetadata": "9c98f21d54260e64f085663e886a76634fc3c3dc0c3ad0a949d6030e7cc294fb"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "998b70d5e641763ec302f7fc29f8646615793dc68679b38b47a756697f869039",
          "withoutMetadata": "dae3863a1d0b28f68c0b054493dd3acff56a820c227fbb984ea4111adff9a32b",
          "linkedWithoutMetadata": "dae3863a1d0b28f68c0b054493dd3acff56a820c227fbb984ea4111adff9a32b"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "60a65e585b94d36f411f6796d938c5f8ec8a5835817951fb3704d77926767d44",
          "withoutMetadata": "1d28f38c5d58aa225d18d93434818b06263b46f55fefdf7ab1f75a6e13f53247",
          "linkedWithoutMetadata": "1d28f38c5d58aa225d18d93434818b06263b46f55fefdf7ab1f75a6e13f53247"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "53e00a1b30205215daec72e5accfe58d5dd3875ff57cce98c7c809b5e4c80a9a",
          "withoutMetadata": "68a6a79bb99f35bb2302f800e4f2050817dc9bb6cbc9d33095dc79617e694cbf",
          "linkedWithoutMetadata": "68a6a79bb99f35bb2302f800e4f2050817dc9bb6cbc9d33095dc79617e694cbf"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "8edb49a25de31422d0a00b36d5fca6b58e97f92dab614dbd2239325d9ca67e8b",
          "withoutMetadata": "4b05b6ba7351ef7a384c5236152069c6eb1d8199f09c1dff01f50e10814d4a5f",
          "linkedWithoutMetadata": "4b05b6ba7351ef7a384c5236152069c6eb1d8199f09c1dff01f50e10814d4a5f"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "waivedShare",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "bc07371c06e0f9b04abfefae63975e2c0c36f3107ddfc6479eae8cc2622ecd22",
          "withoutMetadata": "30f6f1d7d49647bba8ebeb2d2c2db9d55233943c57ecc8ec3fca03d45a70dbd6",
          "linkedWithoutMetadata": "30f6f1d7d49647bba8ebeb2d2c2db9d55233943c57ecc8ec3fca03d45a70dbd6"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "waivedShare",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "bb5f765fdc171bf21951b3814751c74567e4a81e27c611d79b23a283c4f9b3aa",
          "withoutMetadata": "8640f21890a8dc1790aaa9b2cdebd08fcae28d285ecff96a57c49b6d332056f0",
          "linkedWithoutMetadata": "8640f21890a8dc1790aaa9b2cdebd08fcae28d285ecff96a57c49b6d332056f0"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "waivedShare",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "0c249cb37368d293c51a0d4f8fa01c8c04f34cac79ac00055b03bd076ebea506",
          "withoutMetadata": "666eeedee068eff94fe4d8c52f214ff69826620f5cffc3d3f78a526c97066457",
          "linkedWithoutMetadata": "666eeedee068eff94fe4d8c52f214ff69826620f5cffc3d3f78a526c97066457"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "waivedShare",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "0d267ffcf3072d1702fa7a2b0297bd93d4b6701038ae97ba8f1075ea0d574b47",
          "withoutMetadata": "28336b28b68a2506b57d0fa4f8da41ba81ed06b16692f29f7114a2438e0e1eff",
          "linkedWithoutMetadata": "28336b28b68a2506b57d0fa4f8da41ba81ed06b16692f29f7114a2438e0e1eff"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "waivedShare",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "8edb49a25de31422d0a00b36d5fca6b58e97f92dab614dbd2239325d9ca67e8b",
          "withoutMetadata": "4b05b6ba7351ef7a384c5236152069c6eb1d8199f09c1dff01f50e10814d4a5f",
          "linkedWithoutMetadata": "4b05b6ba7351ef7a384c5236152069c6eb1d8199f09c1dff01f50e10814d4a5f"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "waivedShare",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "6c6acf4779a7ea109d116885c9f0fa747b86110ac2b411708ee30b98cb19ff92",
          "withoutMetadata": "2525811e0131f113eec1b46156a5d05723e11253f5d70037e340c46ed3d0df18",
          "linkedWithoutMetadata": "2525811e0131f113eec1b46156a5d05723e11253f5d70037e340c46ed3d0df18"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "waivedShare",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "ff1a7305227574dfca52490f76138d729745c39129ee95c3850bb3ca40db08bf",
          "withoutMetadata": "dd8314b4a3e47d122a5814aba7acf6df4207b616dc04fb592fa2984af3cb2459",
          "linkedWithoutMetadata": "dd8314b4a3e47d122a5814aba7acf6df4207b616dc04fb592fa2984af3cb2459"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "waivedShare",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "aa000a20d55ef310a9a4048c26ebb2dc6e1697485cccab427685d829d928e64c",
          "withoutMetadata": "f9a1b339aa4a06cf46832d67b4f4ea21e123a06d09341a49ea3f28c5517b093d",
          "linkedWithoutMetadata": "f9a1b339aa4a06cf46832d67b4f4ea21e123a06d09341a49ea3f28c5517b093d"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "waivedShare",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "980bbb4d83dbf0fdaa68914d017ca9b8d58abf3cb1c08a4464aef6bf4b7e86f2",
          "withoutMetadata": "b6048183f3a235229ec2800c3740c7e2088bcb4046f8e7a7d9579dd7f62005ca",
          "linkedWithoutMetadata": "b6048183f3a235229ec2800c3740c7e2088bcb4046f8e7a7d9579dd7f62005ca"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:159"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "waivedShare",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "15",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:150"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "4352134f1717de5f6e58967b7a9347198a912051b40a83ecb80c8cb5366d075b",
          "withoutMetadata": "83f53862403de0bf6dc83a9e84eb96c08ba95b7309f6630bc70ef8e01d1e668d",
          "linkedWithoutMetadata": "83f53862403de0bf6dc83a9e84eb96c08ba95b7309f6630bc70ef8e01d1e668d"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdrawWithFee(address)",
          "availableForWithdraw(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "c91064844bd24488bdbe0bc63cde04351884bea4489760b5b4b7dfcb333c99a8",
          "withoutMetadata": "31975a688397d2f28cb013bf402e4b51bb5ed164ad141a857c06eafba41e3df7",
          "linkedWithoutMetadata": "31975a688397d2f28cb013bf402e4b51bb5ed164ad141a857c06eafba41e3df7"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "availableForWithdrawNoFee(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "40c31c27fb875a15e814e78fd24c8beaf3e79194bd159da9678bfe8715d4cb84",
          "withoutMetadata": "89b94afd67ee5abbcda7a8b9ad9a80278624265c42e8b4599e95d749f24e9fbe",
          "linkedWithoutMetadata": "89b94afd67ee5abbcda7a8b9ad9a80278624265c42e8b4599e95d749f24e9fbe"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "availableForWithdrawNoFee(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "DummyToken": {
        "src": "contracts\\DummyToken.sol:8",
        "version": {
          "withMetadata": "550d2db0d17c88bd11b65283bec4a6407eda1207b9520c8e27d1f468cac909de",
          "withoutMetadata": "0d95652e58b34770dcbfe3b8b25f6833f9f458167917719bf09b899c4e010644",
          "linkedWithoutMetadata": "0d95652e58b34770dcbfe3b8b25f6833f9f458167917719bf09b899c4e010644"
        },
        "inherit": [
          "Ownable",
          "ERC20Burnable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DummyToken",
            "src": "contracts\\DummyToken.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_owner",
              "offset": 1,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "e65aef5a52eb9b3b39f0d069d0468223d4fe09b7784cb9832bd4621c157c42dd",
          "withoutMetadata": "926dc9d3b5898ca8c6f86d1f1c019381b36f3e1ce781a1144ba5eb77ed833e49",
          "linkedWithoutMetadata": "926dc9d3b5898ca8c6f86d1f1c019381b36f3e1ce781a1144ba5eb77ed833e49"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "availableForWithdrawNoFee(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "withdrawIgnoreLossesOnBehalfOf(address,uint256)",
          "takeProfitOnBehalfOf(address)",
          "withdrawInitialOnBehalfOf(address)",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:158"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "8555356f66c2579f6343531b8fbf572d63bd17750da4218a34a6f2268cce2659",
          "withoutMetadata": "3d8212769b8e77542b56cf1527e3dbfa97f4674c6dc6319901ca3fbd984d3596",
          "linkedWithoutMetadata": "3d8212769b8e77542b56cf1527e3dbfa97f4674c6dc6319901ca3fbd984d3596"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "availableForWithdrawNoFee(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:151"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "04c7cf51e427b74c09f4b534e5719fbf2fc7f042db9aa19a324dbc898d0f23cf",
          "withoutMetadata": "3d8212769b8e77542b56cf1527e3dbfa97f4674c6dc6319901ca3fbd984d3596",
          "linkedWithoutMetadata": "3d8212769b8e77542b56cf1527e3dbfa97f4674c6dc6319901ca3fbd984d3596"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "availableForWithdrawNoFee(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)",
          "adminSettings(uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:151"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "unlockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "unlockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "df2504f18a7ac91d352cc17f4d985a0df7d12109921ac17913e9111434bd399c",
          "withoutMetadata": "cb6b7d0dd97c54bda70b644d7c0863d7b81cba8919d3131eb76bfeffeab767c6",
          "linkedWithoutMetadata": "cb6b7d0dd97c54bda70b644d7c0863d7b81cba8919d3131eb76bfeffeab767c6"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "availableForWithdrawNoFee(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:151"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "lockDayMin",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "lockDayMax",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:148"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "14",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:149"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "c5293dbad2dc919cfdbf55313e12ca13e6a1f815c0b977ca5f9242b6ef0e4de4",
          "withoutMetadata": "2fb7fea0bfe0dbae66eda9326efb2ed379c8ded932d6f4891bd18d45765eb424",
          "linkedWithoutMetadata": "2fb7fea0bfe0dbae66eda9326efb2ed379c8ded932d6f4891bd18d45765eb424"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "availableForWithdrawNoFee(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:149"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "15fcab865983e05ce5fd4b0be99589d0692ed68764a779466c854f9e89a63246",
          "withoutMetadata": "30478e024fed3e49772b13f1a1af20cd8616ef98db833ae2a56110c6057ce325",
          "linkedWithoutMetadata": "30478e024fed3e49772b13f1a1af20cd8616ef98db833ae2a56110c6057ce325"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "availableForWithdrawNoFee(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:149"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "cbcf64a2b51422a43a2fb75a68ee549873f907efa10869906842a4c74098fa8c",
          "withoutMetadata": "1e545636e15e3dc8160dbc2717f6cd40bdbbad2a903ad6727418866904896d5b",
          "linkedWithoutMetadata": "1e545636e15e3dc8160dbc2717f6cd40bdbbad2a903ad6727418866904896d5b"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "availableForWithdrawNoFee(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:149"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "a5ebe3b9f1c3f0dc82251561da6b09e13a68f2fddf306d6c575e583656080013",
          "withoutMetadata": "9177eaba6e24a36dfe680979f48c171241ea460d25a8bb9a2d717e204b8db0e6",
          "linkedWithoutMetadata": "9177eaba6e24a36dfe680979f48c171241ea460d25a8bb9a2d717e204b8db0e6"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "availableForWithdrawNoFee(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:149"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "feab22914901d549b52038429f036ee88f2e5cc6c94ca6452ef1754e7c94a5fa",
          "withoutMetadata": "9177eaba6e24a36dfe680979f48c171241ea460d25a8bb9a2d717e204b8db0e6",
          "linkedWithoutMetadata": "9177eaba6e24a36dfe680979f48c171241ea460d25a8bb9a2d717e204b8db0e6"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "availableForWithdrawNoFee(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:149"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "03f15e49bbbbd9f3fde67e213d2d5c3eb8bfaeff24acaa84a011954c2d944349",
          "withoutMetadata": "9177eaba6e24a36dfe680979f48c171241ea460d25a8bb9a2d717e204b8db0e6",
          "linkedWithoutMetadata": "9177eaba6e24a36dfe680979f48c171241ea460d25a8bb9a2d717e204b8db0e6"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "availableForWithdrawNoFee(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:149"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "ba4404e15f162d8f11992430c3e476114e3f4202e583333147d5836e759808f9",
          "withoutMetadata": "94f0ea82d35fe5460c6a4bdf042ece94606b5e130119f38549e6fd14f41607ea",
          "linkedWithoutMetadata": "94f0ea82d35fe5460c6a4bdf042ece94606b5e130119f38549e6fd14f41607ea"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "availableForWithdrawNoFee(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:149"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "06c824f407f522dae93ab60e3dfe6a5627cfb877de059b6ac247b0e7b9438a85",
          "withoutMetadata": "94f0ea82d35fe5460c6a4bdf042ece94606b5e130119f38549e6fd14f41607ea",
          "linkedWithoutMetadata": "94f0ea82d35fe5460c6a4bdf042ece94606b5e130119f38549e6fd14f41607ea"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "availableForWithdrawNoFee(address)",
          "approve(address,uint256)",
          "collect()",
          "collectOnBehalfOf(address)",
          "withdrawOnBehalfOf(address,uint256)",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:149"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:147"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "ef3b9af4bb098b09e6195622631bb79d9ab269466a5bdc426b8dab19b9eb0f3b",
          "withoutMetadata": "7c624f4e615b33553c4d1c5199e3f30d96501c4ea69ea51628eeb5ace8080d2d",
          "linkedWithoutMetadata": "7c624f4e615b33553c4d1c5199e3f30d96501c4ea69ea51628eeb5ace8080d2d"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "availableForWithdrawNoFee(address)",
          "collect()",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "3d72eb269ba7ad226f124dd8275845d7e29bdbcffa7a28a1a317a85140afcb4e",
          "withoutMetadata": "76a6e88da224c7f3a43dab9aefa90d92a5e39ea4c7c63f87bd119133cfa9d571",
          "linkedWithoutMetadata": "76a6e88da224c7f3a43dab9aefa90d92a5e39ea4c7c63f87bd119133cfa9d571"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "collect()",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "92c6334db422ef5e57882373eaab4f3c6755f698112362d83ea872e2baf66a84",
          "withoutMetadata": "55496d58ec70176307720d347fbc46ff69d2c8ac06632e132e8882ff13c2fd9d",
          "linkedWithoutMetadata": "55496d58ec70176307720d347fbc46ff69d2c8ac06632e132e8882ff13c2fd9d"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "depositOnBehalfOf(address,uint256)",
          "balanceToCollect(address)",
          "availableForWithdraw(address)",
          "collect()",
          "withdraw(uint256)",
          "withdrawIgnoreLosses(uint256)",
          "takeProfit()",
          "withdrawInitial()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:148"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "withdrawFee",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "11",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:146"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:73",
        "version": {
          "withMetadata": "a7ef8610e93a41fff18fee8be9a5da81f112a4f6fd140cb303f7d5edc12b9937",
          "withoutMetadata": "9e376b2ba2feb6e8a7a9984b00c6805fe60797104825f0bd2b478e919adc7d89",
          "linkedWithoutMetadata": "9e376b2ba2feb6e8a7a9984b00c6805fe60797104825f0bd2b478e919adc7d89"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "balanceToCollect(address)",
          "collect()",
          "withdraw(uint256)",
          "takeProfit()",
          "withdrawInitial()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:76"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:77"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:145"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:71",
        "version": {
          "withMetadata": "a57184cc6b17164e878f15f31482f38efb8b73f364d1a3b5caad3c9eadac7ff0",
          "withoutMetadata": "9e376b2ba2feb6e8a7a9984b00c6805fe60797104825f0bd2b478e919adc7d89",
          "linkedWithoutMetadata": "9e376b2ba2feb6e8a7a9984b00c6805fe60797104825f0bd2b478e919adc7d89"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "balanceToCollect(address)",
          "collect()",
          "withdraw(uint256)",
          "takeProfit()",
          "withdrawInitial()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:145"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:73"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:74"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:136"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:137"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:140"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:71",
        "version": {
          "withMetadata": "ce1ce1ff53f961e121422d05b6553a00cd716ddba1e63c0b5a79e29add22a764",
          "withoutMetadata": "9e376b2ba2feb6e8a7a9984b00c6805fe60797104825f0bd2b478e919adc7d89",
          "linkedWithoutMetadata": "9e376b2ba2feb6e8a7a9984b00c6805fe60797104825f0bd2b478e919adc7d89"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "balanceToCollect(address)",
          "collect()",
          "withdraw(uint256)",
          "takeProfit()",
          "withdrawInitial()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:146"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:73"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:74"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:136"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:137"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:71",
        "version": {
          "withMetadata": "2dd62fa72cb833f166dcf7faa5181f44d04e5995b3ee02dc6fdc986a8216c7cd",
          "withoutMetadata": "9648c28c9d04a49b6d5311c1e746af32daefd43f32a2c718a2d6acf4d56252c0",
          "linkedWithoutMetadata": "9648c28c9d04a49b6d5311c1e746af32daefd43f32a2c718a2d6acf4d56252c0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:73"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:74"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:75"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:136"
            },
            {
              "label": "lastMonthChange",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:137"
            },
            {
              "label": "lastYearChange",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:138"
            },
            {
              "label": "pendingDeposited",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:139"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:141"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:142"
            },
            {
              "label": "pendingShare",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:143"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:144"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:122",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:187",
        "version": {
          "withMetadata": "e065801c02018c3603b26cdc8125439c3efb43c66fa97705cc937f076b7cc8da",
          "withoutMetadata": "741aa610305e7a779340517eeded4a85f58121c4ba4bad045e1040f4627719dd",
          "linkedWithoutMetadata": "741aa610305e7a779340517eeded4a85f58121c4ba4bad045e1040f4627719dd"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "balanceToCollect(address)",
          "collect()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:190"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:191"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:192"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:253"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:254"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:255"
            },
            {
              "label": "lockedMode",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:256"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradWallet.sol:122",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:187",
        "version": {
          "withMetadata": "43df02dfa9ec3f3d248b2ef9265d022c3f10f3cb01cb1e6e6574ce8ec03959d7",
          "withoutMetadata": "c1753fcd995ede5a5e868cac900681db18381ddd1d0ffe47ff46107a79217074",
          "linkedWithoutMetadata": "c1753fcd995ede5a5e868cac900681db18381ddd1d0ffe47ff46107a79217074"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "getUnlockTime()",
          "lock(uint256)",
          "unlock()",
          "(address)",
          "isLocked()",
          "deposit(uint256)",
          "balanceToCollect(address)",
          "collect()",
          "adminDeposit(uint256)",
          "adminWithdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradWallet",
            "src": "contracts\\TetradWallet.sol:258"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:190"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:191"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:192"
            },
            {
              "label": "totalDeposited",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:253"
            },
            {
              "label": "share",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:254"
            },
            {
              "label": "asset",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IERC20)1561",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:255"
            },
            {
              "label": "lockedMode",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "TetradWallet",
              "src": "contracts\\TetradWallet.sol:256"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1561": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:6",
        "version": {
          "withMetadata": "3f43a7bcdcf343fde82ce6b734e4d49a462fd99a181824afbce935a5e6c11649",
          "withoutMetadata": "f862917f38b23bb13aca7b8f87b2213d6bcb31d4114838b48d0727d8b1973801",
          "linkedWithoutMetadata": "f862917f38b23bb13aca7b8f87b2213d6bcb31d4114838b48d0727d8b1973801"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "()",
          "isTodayFirstDayOfMonth()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Address": {
        "src": "contracts\\Tetrad.sol:212",
        "version": {
          "withMetadata": "c4c4f2a7d2da3eaa19072124d9f35192ddb482872d64b6d86149976ee51889bc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "contracts\\Tetrad.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\Tetrad.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\Tetrad.sol:401",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts\\Tetrad.sol:412",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Tetrad.sol:454",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Tetrad.sol:545",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts\\Tetrad.sol:337",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "geUnlockTime()",
          "lock(uint256)",
          "unlock()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Tetrad.sol:345"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:338"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:339"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:340"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "contracts\\Tetrad.sol:82",
        "version": {
          "withMetadata": "c34739b1d2b262980a8b2b369a9dbb2fcd7a961af4a5d1d096da0cd436410480",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Tetrad": {
        "src": "contracts\\Tetrad.sol:585",
        "version": {
          "withMetadata": "63193a3056ecf2a17b63349e9096dd49be0c27e36509c654e07cea84f3152c76",
          "withoutMetadata": "b857763ede1a14a274735b710970b5f299bdd541cb7c747be11a53cdb8343ac9",
          "linkedWithoutMetadata": "b857763ede1a14a274735b710970b5f299bdd541cb7c747be11a53cdb8343ac9"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcluded(address)",
          "setExcludeFromFee(address,bool)",
          "totalFees()",
          "deliver(uint256)",
          "reflectionFromToken(uint256,bool)",
          "tokenFromReflection(uint256)",
          "excludeAccount(address)",
          "includeAccount(address)",
          "isExcludedFromFee(address)",
          "manualSwap()",
          "manualSend()",
          "setSwapEnabled(bool)",
          "()",
          "_getETHBalance()",
          "_setTaxFee(uint256)",
          "_setTeamFee(uint256)",
          "_setTRADEWallet(address payable)",
          "_setMarketingWallet(address payable)",
          "_setMaxTxAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Tetrad",
            "src": "contracts\\Tetrad.sol:621"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_tTotal",
            "src": "contracts\\Tetrad.sol:595"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_rTotal",
            "src": "contracts\\Tetrad.sol:596"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\Tetrad.sol:598"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\Tetrad.sol:599"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\Tetrad.sol:600"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_taxFee",
            "src": "contracts\\Tetrad.sol:601"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_teamFee",
            "src": "contracts\\Tetrad.sol:602"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousTaxFee",
            "src": "contracts\\Tetrad.sol:603"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousTeamFee",
            "src": "contracts\\Tetrad.sol:604"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Router",
            "src": "contracts\\Tetrad.sol:607"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Pair",
            "src": "contracts\\Tetrad.sol:608"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts\\Tetrad.sol:609"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Tetrad.sol:610"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\Tetrad.sol:611"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_numOfTokensToExchangeForTeam",
            "src": "contracts\\Tetrad.sol:613"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:338"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:339"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:340"
            },
            {
              "label": "_rOwned",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:588"
            },
            {
              "label": "_tOwned",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:589"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:590"
            },
            {
              "label": "_isExcludedFromFee",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:591"
            },
            {
              "label": "_isExcluded",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:592"
            },
            {
              "label": "_excluded",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:593"
            },
            {
              "label": "_tTotal",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:595"
            },
            {
              "label": "_rTotal",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:596"
            },
            {
              "label": "_tFeeTotal",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:597"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:598"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "13",
              "type": "t_string_storage",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:599"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "14",
              "type": "t_uint8",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:600"
            },
            {
              "label": "_taxFee",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:601"
            },
            {
              "label": "_teamFee",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:602"
            },
            {
              "label": "_previousTaxFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:603"
            },
            {
              "label": "_previousTeamFee",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:604"
            },
            {
              "label": "_TRADEWalletAddress",
              "offset": 0,
              "slot": "19",
              "type": "t_address_payable",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:605"
            },
            {
              "label": "_marketingWalletAddress",
              "offset": 0,
              "slot": "20",
              "type": "t_address_payable",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:606"
            },
            {
              "label": "inSwap",
              "offset": 20,
              "slot": "20",
              "type": "t_bool",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:609"
            },
            {
              "label": "swapEnabled",
              "offset": 21,
              "slot": "20",
              "type": "t_bool",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:610"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:611"
            },
            {
              "label": "_numOfTokensToExchangeForTeam",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:613"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:6",
        "version": {
          "withMetadata": "6bea515386445e59da0c480175f2d69675bb62624b1a539f6c08b952a6e9e8ac",
          "withoutMetadata": "f862917f38b23bb13aca7b8f87b2213d6bcb31d4114838b48d0727d8b1973801",
          "linkedWithoutMetadata": "f862917f38b23bb13aca7b8f87b2213d6bcb31d4114838b48d0727d8b1973801"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "()",
          "isTodayFirstDayOfMonth()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Address": {
        "src": "contracts\\Tetrad.sol:212",
        "version": {
          "withMetadata": "c4c4f2a7d2da3eaa19072124d9f35192ddb482872d64b6d86149976ee51889bc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "contracts\\Tetrad.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\Tetrad.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\Tetrad.sol:401",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts\\Tetrad.sol:412",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Tetrad.sol:454",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Tetrad.sol:545",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts\\Tetrad.sol:337",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "geUnlockTime()",
          "lock(uint256)",
          "unlock()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Tetrad.sol:345"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:338"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:339"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:340"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "contracts\\Tetrad.sol:82",
        "version": {
          "withMetadata": "c34739b1d2b262980a8b2b369a9dbb2fcd7a961af4a5d1d096da0cd436410480",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Tetrad": {
        "src": "contracts\\Tetrad.sol:585",
        "version": {
          "withMetadata": "63193a3056ecf2a17b63349e9096dd49be0c27e36509c654e07cea84f3152c76",
          "withoutMetadata": "b857763ede1a14a274735b710970b5f299bdd541cb7c747be11a53cdb8343ac9",
          "linkedWithoutMetadata": "b857763ede1a14a274735b710970b5f299bdd541cb7c747be11a53cdb8343ac9"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcluded(address)",
          "setExcludeFromFee(address,bool)",
          "totalFees()",
          "deliver(uint256)",
          "reflectionFromToken(uint256,bool)",
          "tokenFromReflection(uint256)",
          "excludeAccount(address)",
          "includeAccount(address)",
          "isExcludedFromFee(address)",
          "manualSwap()",
          "manualSend()",
          "setSwapEnabled(bool)",
          "()",
          "_getETHBalance()",
          "_setTaxFee(uint256)",
          "_setTeamFee(uint256)",
          "_setTRADEWallet(address payable)",
          "_setMarketingWallet(address payable)",
          "_setMaxTxAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Tetrad",
            "src": "contracts\\Tetrad.sol:621"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_tTotal",
            "src": "contracts\\Tetrad.sol:595"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_rTotal",
            "src": "contracts\\Tetrad.sol:596"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\Tetrad.sol:598"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\Tetrad.sol:599"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\Tetrad.sol:600"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_taxFee",
            "src": "contracts\\Tetrad.sol:601"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_teamFee",
            "src": "contracts\\Tetrad.sol:602"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousTaxFee",
            "src": "contracts\\Tetrad.sol:603"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousTeamFee",
            "src": "contracts\\Tetrad.sol:604"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Router",
            "src": "contracts\\Tetrad.sol:607"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Pair",
            "src": "contracts\\Tetrad.sol:608"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts\\Tetrad.sol:609"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Tetrad.sol:610"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\Tetrad.sol:611"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_numOfTokensToExchangeForTeam",
            "src": "contracts\\Tetrad.sol:613"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:338"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:339"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:340"
            },
            {
              "label": "_rOwned",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:588"
            },
            {
              "label": "_tOwned",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:589"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:590"
            },
            {
              "label": "_isExcludedFromFee",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:591"
            },
            {
              "label": "_isExcluded",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:592"
            },
            {
              "label": "_excluded",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:593"
            },
            {
              "label": "_tTotal",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:595"
            },
            {
              "label": "_rTotal",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:596"
            },
            {
              "label": "_tFeeTotal",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:597"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:598"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "13",
              "type": "t_string_storage",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:599"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "14",
              "type": "t_uint8",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:600"
            },
            {
              "label": "_taxFee",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:601"
            },
            {
              "label": "_teamFee",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:602"
            },
            {
              "label": "_previousTaxFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:603"
            },
            {
              "label": "_previousTeamFee",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:604"
            },
            {
              "label": "_TRADEWalletAddress",
              "offset": 0,
              "slot": "19",
              "type": "t_address_payable",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:605"
            },
            {
              "label": "_marketingWalletAddress",
              "offset": 0,
              "slot": "20",
              "type": "t_address_payable",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:606"
            },
            {
              "label": "inSwap",
              "offset": 20,
              "slot": "20",
              "type": "t_bool",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:609"
            },
            {
              "label": "swapEnabled",
              "offset": 21,
              "slot": "20",
              "type": "t_bool",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:610"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:611"
            },
            {
              "label": "_numOfTokensToExchangeForTeam",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:613"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "BokkyPooBahsDateTimeLibrary": {
        "src": "contracts\\BokkyPooBahsDateTimeLibrary.sol:29",
        "version": {
          "withMetadata": "7f18457b2b4070bbe08a0136f16eda4bbf1248eac3f451ac58e28fa602a9708f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradWallet": {
        "src": "contracts\\TetradWallet.sol:6",
        "version": {
          "withMetadata": "6bea515386445e59da0c480175f2d69675bb62624b1a539f6c08b952a6e9e8ac",
          "withoutMetadata": "f862917f38b23bb13aca7b8f87b2213d6bcb31d4114838b48d0727d8b1973801",
          "linkedWithoutMetadata": "f862917f38b23bb13aca7b8f87b2213d6bcb31d4114838b48d0727d8b1973801"
        },
        "inherit": [],
        "libraries": [
          "BokkyPooBahsDateTimeLibrary"
        ],
        "methods": [
          "()",
          "isTodayFirstDayOfMonth()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Address": {
        "src": "contracts\\TetradRewardPool.sol:86",
        "version": {
          "withMetadata": "991d9ab50d21b5a4a70af7cd7b9aa3bf0ed76a948b5df43d28a23a0ab2246f99",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts\\TetradRewardPool.sol:130"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradRewardPool.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IOps": {
        "src": "contracts\\TetradRewardPool.sol:185",
        "inherit": [],
        "libraries": [],
        "methods": [
          "gelato()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "OpsReady": {
        "src": "contracts\\TetradRewardPool.sol:190",
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OpsReady",
            "src": "contracts\\TetradRewardPool.sol:198"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ops",
            "src": "contracts\\TetradRewardPool.sol:191"
          },
          {
            "kind": "state-variable-immutable",
            "name": "gelato",
            "src": "contracts\\TetradRewardPool.sol:192"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "contracts\\TetradRewardPool.sol:151",
        "version": {
          "withMetadata": "11436cc6ca3dd3eb07a704529ddbd77ad380b6dcf63a7114f93d58cb74f4fc2e",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "contracts\\TetradRewardPool.sol:24",
        "version": {
          "withMetadata": "ba2c63fffd8e2c70a8c81ebf963ea06694892da056f4f7cf4b667ad56c8801f0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradRewardPool": {
        "src": "contracts\\TetradRewardPool.sol:213",
        "version": {
          "withMetadata": "5b6a8cf568c21549767c99e8145535422403eb4959cdfe0830b7e4248309fa41",
          "withoutMetadata": "0c4eee8dd8f561f78fd07c669f50525c3714bd775ba942860e860b660d33e588",
          "linkedWithoutMetadata": "0c4eee8dd8f561f78fd07c669f50525c3714bd775ba942860e860b660d33e588"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,uint256,uint256,uint256)",
          "add(uint256,address,bool,uint256)",
          "set(uint256,uint256)",
          "getGeneratedReward(uint256,uint256)",
          "pendingTetrad(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setOperator(address)",
          "governanceRecoverUnsupported(address,uint256,address)",
          "getTetradPerSecondInPool(uint256)",
          "poolLength()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradRewardPool",
            "src": "contracts\\TetradRewardPool.sol:251"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts\\TetradRewardPool.sol:238"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "operator",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:217"
            },
            {
              "label": "tetrad",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)78",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:232"
            },
            {
              "label": "poolInfo",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(PoolInfo)1011_storage)dyn_storage",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:234"
            },
            {
              "label": "userInfo",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1000_storage))",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:236"
            },
            {
              "label": "totalAllocPoint",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:238"
            },
            {
              "label": "poolStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:240"
            },
            {
              "label": "poolEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:241"
            },
            {
              "label": "runningTime",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:243"
            },
            {
              "label": "tetradPerSecond",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:244"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PoolInfo)1011_storage)dyn_storage": {
              "label": "struct TetradRewardPool.PoolInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)78": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(UserInfo)1000_storage)": {
              "label": "mapping(address => struct TetradRewardPool.UserInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1000_storage))": {
              "label": "mapping(uint256 => mapping(address => struct TetradRewardPool.UserInfo))",
              "numberOfBytes": "32"
            },
            "t_struct(PoolInfo)1011_storage": {
              "label": "struct TetradRewardPool.PoolInfo",
              "members": [
                {
                  "label": "token",
                  "type": "t_contract(IERC20)78",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "accTetradPerTetrad",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isStarted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(UserInfo)1000_storage": {
              "label": "struct TetradRewardPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "Address": {
        "src": "contracts\\TetradRewardPool.sol:86",
        "version": {
          "withMetadata": "7a6888fa13d62d7dd949a0451348f624d8ebb5159b9a1ce8f34e617761bc9901",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts\\TetradRewardPool.sol:130"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradRewardPool.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IOps": {
        "src": "contracts\\TetradRewardPool.sol:185",
        "inherit": [],
        "libraries": [],
        "methods": [
          "gelato()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "OpsReady": {
        "src": "contracts\\TetradRewardPool.sol:190",
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OpsReady",
            "src": "contracts\\TetradRewardPool.sol:198"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ops",
            "src": "contracts\\TetradRewardPool.sol:191"
          },
          {
            "kind": "state-variable-immutable",
            "name": "gelato",
            "src": "contracts\\TetradRewardPool.sol:192"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "contracts\\TetradRewardPool.sol:151",
        "version": {
          "withMetadata": "75e31f94827dfc564b77b24fb142b5ddc8e296e258f1526ff7c4ad39e28295aa",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "contracts\\TetradRewardPool.sol:24",
        "version": {
          "withMetadata": "2cad1ae7708ba9bbed47f04ab6485c25ae0867b462dec96b56f6d6a860fc71de",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradRewardPool": {
        "src": "contracts\\TetradRewardPool.sol:213",
        "version": {
          "withMetadata": "6185f32e0629c3592326cda19d05398ef70e0a913b466932efbbb914f1ed3d2e",
          "withoutMetadata": "ea7e7c3c342e1f103b4049019076b0d84d762bfd664f82ecc1a885e359cd5704",
          "linkedWithoutMetadata": "ea7e7c3c342e1f103b4049019076b0d84d762bfd664f82ecc1a885e359cd5704"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,uint256,uint256,uint256)",
          "add(uint256,address,bool,uint256)",
          "set(uint256,uint256)",
          "getGeneratedReward(uint256,uint256)",
          "pendingTetrad(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setOperator(address)",
          "governanceRecoverUnsupported(address,uint256,address)",
          "getTetradPerSecondInPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradRewardPool",
            "src": "contracts\\TetradRewardPool.sol:251"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts\\TetradRewardPool.sol:238"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "operator",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:217"
            },
            {
              "label": "tetrad",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)78",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:232"
            },
            {
              "label": "poolInfo",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(PoolInfo)1011_storage)dyn_storage",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:234"
            },
            {
              "label": "userInfo",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1000_storage))",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:236"
            },
            {
              "label": "totalAllocPoint",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:238"
            },
            {
              "label": "poolStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:240"
            },
            {
              "label": "poolEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:241"
            },
            {
              "label": "runningTime",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:243"
            },
            {
              "label": "tetradPerSecond",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:244"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PoolInfo)1011_storage)dyn_storage": {
              "label": "struct TetradRewardPool.PoolInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)78": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(UserInfo)1000_storage)": {
              "label": "mapping(address => struct TetradRewardPool.UserInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1000_storage))": {
              "label": "mapping(uint256 => mapping(address => struct TetradRewardPool.UserInfo))",
              "numberOfBytes": "32"
            },
            "t_struct(PoolInfo)1011_storage": {
              "label": "struct TetradRewardPool.PoolInfo",
              "members": [
                {
                  "label": "token",
                  "type": "t_contract(IERC20)78",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "accTetradPerTetrad",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isStarted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(UserInfo)1000_storage": {
              "label": "struct TetradRewardPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "Address": {
        "src": "contracts\\TetradRewardPool.sol:86",
        "version": {
          "withMetadata": "6976879ac9cb7e6bb38ce1eb64b97665e3c3c9ef7d051ea0e000c04d28b5ddc5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts\\TetradRewardPool.sol:130"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradRewardPool.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IOps": {
        "src": "contracts\\TetradRewardPool.sol:185",
        "inherit": [],
        "libraries": [],
        "methods": [
          "gelato()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "OpsReady": {
        "src": "contracts\\TetradRewardPool.sol:190",
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OpsReady",
            "src": "contracts\\TetradRewardPool.sol:198"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ops",
            "src": "contracts\\TetradRewardPool.sol:191"
          },
          {
            "kind": "state-variable-immutable",
            "name": "gelato",
            "src": "contracts\\TetradRewardPool.sol:192"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "contracts\\TetradRewardPool.sol:151",
        "version": {
          "withMetadata": "d14fc15ae18e1ad4eaa4f219ef9a15b30acc1ab6332ed6f0abe9d89eba56fcea",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "contracts\\TetradRewardPool.sol:24",
        "version": {
          "withMetadata": "87ad12c99bf0931f722f83164210df6755b5c3f4b3fbad4aeac3cc6c2bf02e91",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradRewardPool": {
        "src": "contracts\\TetradRewardPool.sol:213",
        "version": {
          "withMetadata": "e7ab0887e1d2b4a4742d92428c003834725fc8d87200b54892ad06369617634e",
          "withoutMetadata": "eb15359b35f18aff6824a560f3c150a90efe7e03950f5080953b48b75919a60c",
          "linkedWithoutMetadata": "eb15359b35f18aff6824a560f3c150a90efe7e03950f5080953b48b75919a60c"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,uint256,uint256,uint256)",
          "add(uint256,address,bool,uint256)",
          "set(uint256,uint256)",
          "getGeneratedReward(uint256,uint256)",
          "pendingTetrad(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setOperator(address)",
          "governanceRecoverUnsupported(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradRewardPool",
            "src": "contracts\\TetradRewardPool.sol:251"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts\\TetradRewardPool.sol:238"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "operator",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:217"
            },
            {
              "label": "tetrad",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)78",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:232"
            },
            {
              "label": "poolInfo",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(PoolInfo)1011_storage)dyn_storage",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:234"
            },
            {
              "label": "userInfo",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1000_storage))",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:236"
            },
            {
              "label": "totalAllocPoint",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:238"
            },
            {
              "label": "poolStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:240"
            },
            {
              "label": "poolEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:241"
            },
            {
              "label": "runningTime",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:243"
            },
            {
              "label": "tetradPerSecond",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:244"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PoolInfo)1011_storage)dyn_storage": {
              "label": "struct TetradRewardPool.PoolInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)78": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(UserInfo)1000_storage)": {
              "label": "mapping(address => struct TetradRewardPool.UserInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1000_storage))": {
              "label": "mapping(uint256 => mapping(address => struct TetradRewardPool.UserInfo))",
              "numberOfBytes": "32"
            },
            "t_struct(PoolInfo)1011_storage": {
              "label": "struct TetradRewardPool.PoolInfo",
              "members": [
                {
                  "label": "token",
                  "type": "t_contract(IERC20)78",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "accTetradPerTetrad",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isStarted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(UserInfo)1000_storage": {
              "label": "struct TetradRewardPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "GSNRecipient": {
        "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:20",
        "inherit": [
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "getHubAddr()",
          "relayHubVersion()",
          "preRelayedCall(bytes)",
          "postRelayedCall(bytes,bool,uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_relayHub",
            "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_relayHub",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GSNRecipient",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "GSNRecipientERC20Fee": {
        "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientERC20Fee.sol:20",
        "version": {
          "withMetadata": "37aeee555359f542b4da6ea92937140321ba41409f1d13821e4b119fe7a0cc40",
          "withoutMetadata": "e943b080b74c690cc4d05805c2c9d128b90ee9fa88eb085f895bc6c81ff891ed",
          "linkedWithoutMetadata": "e943b080b74c690cc4d05805c2c9d128b90ee9fa88eb085f895bc6c81ff891ed"
        },
        "inherit": [
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "token()",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientERC20Fee",
            "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientERC20Fee.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_relayHub",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GSNRecipient",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(__unstable__ERC20Owned)705",
              "contract": "GSNRecipientERC20Fee",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientERC20Fee.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(__unstable__ERC20Owned)705": {
              "label": "contract __unstable__ERC20Owned",
              "numberOfBytes": "20"
            },
            "t_contract$___unstable__ERC20Owned)705": {
              "label": "contract __unstable__ERC20Owned"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "__unstable__ERC20Owned": {
        "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientERC20Fee.sol:118",
        "version": {
          "withMetadata": "d8ac1af26a244eb6fad12eeeaf631751cc0cb2a1b52a5105764ba0fd03c58e6d",
          "withoutMetadata": "cc222a2fe6c98b480ef2b8bddebf1099d150493d09d08a65587ade2f77ab260a",
          "linkedWithoutMetadata": "cc222a2fe6c98b480ef2b8bddebf1099d150493d09d08a65587ade2f77ab260a"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "allowance(address,address)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "__unstable__ERC20Owned",
            "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientERC20Fee.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_owner",
              "offset": 1,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "GSNRecipientSignature": {
        "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientSignature.sol:14",
        "version": {
          "withMetadata": "0531c4267201deb946c81963b80ca8bdd1b3c344ba9a8e976de4d969287e39ab",
          "withoutMetadata": "0531c4267201deb946c81963b80ca8bdd1b3c344ba9a8e976de4d969287e39ab",
          "linkedWithoutMetadata": "0531c4267201deb946c81963b80ca8bdd1b3c344ba9a8e976de4d969287e39ab"
        },
        "inherit": [
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [
          "ECDSA"
        ],
        "methods": [
          "(address)",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientSignature",
            "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientSignature.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_relayHub",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GSNRecipient",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
            },
            {
              "label": "_trustedSigner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "GSNRecipientSignature",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientSignature.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IRelayHub": {
        "src": "contracts\\@openzeppelin\\contracts\\GSN\\IRelayHub.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "registerRelay(uint256,string)",
          "removeRelayByOwner(address)",
          "unstake(address)",
          "getRelay(address)",
          "depositFor(address)",
          "balanceOf(address)",
          "withdraw(uint256,address payable)",
          "canRelay(address,address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes)",
          "relayCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes)",
          "requiredGas(uint256)",
          "maxPossibleCharge(uint256,uint256,uint256)",
          "penalizeRepeatedNonce(bytes,bytes,bytes,bytes)",
          "penalizeIllegalTransaction(bytes,bytes)",
          "getNonce(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "contracts\\@openzeppelin\\contracts\\GSN\\IRelayRecipient.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getHubAddr()",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)",
          "preRelayedCall(bytes)",
          "postRelayedCall(bytes,bool,uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControl": {
        "src": "contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol:44",
        "inherit": [
          "Context"
        ],
        "libraries": [
          "EnumerableSet",
          "Address"
        ],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleMemberCount(bytes32)",
          "getRoleMember(bytes32,uint256)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)",
              "contract": "AccessControl",
              "src": "contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol:53"
            }
          ],
          "types": {
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)16486_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)1187_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)16486_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Ownable": {
        "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TimelockController": {
        "src": "contracts\\@openzeppelin\\contracts\\access\\TimelockController.sol:24",
        "version": {
          "withMetadata": "fe603694a8eb654af776bfa1d4e2a130fa91c02eb4cd51973e23f959b8d95a7f",
          "withoutMetadata": "fe603694a8eb654af776bfa1d4e2a130fa91c02eb4cd51973e23f959b8d95a7f",
          "linkedWithoutMetadata": "fe603694a8eb654af776bfa1d4e2a130fa91c02eb4cd51973e23f959b8d95a7f"
        },
        "inherit": [
          "AccessControl",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address[],address[])",
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimelockController",
            "src": "contracts\\@openzeppelin\\contracts\\access\\TimelockController.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)",
              "contract": "AccessControl",
              "src": "contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol:53"
            },
            {
              "label": "_timestamps",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "TimelockController",
              "src": "contracts\\@openzeppelin\\contracts\\access\\TimelockController.sol:31"
            },
            {
              "label": "_minDelay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TimelockController",
              "src": "contracts\\@openzeppelin\\contracts\\access\\TimelockController.sol:32"
            }
          ],
          "types": {
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)16486_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)1187_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)16486_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ECDSA": {
        "src": "contracts\\@openzeppelin\\contracts\\cryptography\\ECDSA.sol:11",
        "version": {
          "withMetadata": "d7ceefb8cb5f0f9bd79ac798866afeb4f7e4b26cff497751745cd0fc55d10d51",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "EIP712": {
        "src": "contracts\\@openzeppelin\\contracts\\drafts\\EIP712.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\EIP712.sol:48"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\EIP712.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\EIP712.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\EIP712.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Permit": {
        "src": "contracts\\@openzeppelin\\contracts\\drafts\\ERC20Permit.sol:21",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\ERC20Permit.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\ERC20Permit.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\ERC20Permit.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_struct(Counter)15499_storage)",
              "contract": "ERC20Permit",
              "src": "contracts\\@openzeppelin\\contracts\\drafts\\ERC20Permit.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)15499_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)15499_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Permit": {
        "src": "contracts\\@openzeppelin\\contracts\\drafts\\IERC20Permit.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165": {
        "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1820Implementer": {
        "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC1820Implementer.sol:15",
        "version": {
          "withMetadata": "8f41d00e3e40d4a91aa60d45ef9228f23cb01b6a9a0204efedf188139f693bb1",
          "withoutMetadata": "28bba79feaa51369f1fce54fac166d60a6bb8d5b9800c7fff2e620c9ba6a4dfd",
          "linkedWithoutMetadata": "28bba79feaa51369f1fce54fac166d60a6bb8d5b9800c7fff2e620c9ba6a4dfd"
        },
        "inherit": [
          "IERC1820Implementer"
        ],
        "libraries": [],
        "methods": [
          "canImplementInterfaceForAddress(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
              "contract": "ERC1820Implementer",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC1820Implementer.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
              "label": "mapping(bytes32 => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165": {
        "src": "contracts\\@openzeppelin\\contracts\\introspection\\IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC1820Implementer": {
        "src": "contracts\\@openzeppelin\\contracts\\introspection\\IERC1820Implementer.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canImplementInterfaceForAddress(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC1820Registry": {
        "src": "contracts\\@openzeppelin\\contracts\\introspection\\IERC1820Registry.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setManager(address,address)",
          "getManager(address)",
          "setInterfaceImplementer(address,bytes32,address)",
          "getInterfaceImplementer(address,bytes32)",
          "interfaceHash(string)",
          "updateERC165Cache(address,bytes4)",
          "implementsERC165Interface(address,bytes4)",
          "implementsERC165InterfaceNoCache(address,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Math": {
        "src": "contracts\\@openzeppelin\\contracts\\math\\Math.sol:8",
        "version": {
          "withMetadata": "4ed0fe27d239695599c39679c57d99a99735e1c02c523fb096caf515cef3642c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "contracts\\@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "fff2b425b20312c8608086251ee0210a51da617035408ce3754ffa27e67be012",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControlMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\AccessControlMock.sol:7",
        "version": {
          "withMetadata": "b7e5bebf7cf4c8791794d23b4bd26d9bdca91d6956a942f9044b0ff067f41d9b",
          "withoutMetadata": "cc96a527da4a0d4a9612219f4efb0852d2a4a8995c22e1879e5f2bff162e94ce",
          "linkedWithoutMetadata": "cc96a527da4a0d4a9612219f4efb0852d2a4a8995c22e1879e5f2bff162e94ce"
        },
        "inherit": [
          "AccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setRoleAdmin(bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccessControlMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\AccessControlMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)",
              "contract": "AccessControl",
              "src": "contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol:53"
            }
          ],
          "types": {
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)16486_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)1187_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)16486_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AddressImpl": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\AddressImpl.sol:7",
        "version": {
          "withMetadata": "bdef85bf3e46e2e515ccaa09b1433ac54d71fc53f25da62838630be26818d4f2",
          "withoutMetadata": "798d5386e89ca6f822264433b90c781b2e36d086525f1b8e8f6f4257b40ce77f",
          "linkedWithoutMetadata": "798d5386e89ca6f822264433b90c781b2e36d086525f1b8e8f6f4257b40ce77f"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "isContract(address)",
          "sendValue(address payable,uint256)",
          "functionCall(address,bytes)",
          "functionCallWithValue(address,bytes,uint256)",
          "functionStaticCall(address,bytes)",
          "functionDelegateCall(address,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "sharedAnswer",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AddressImpl",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\AddressImpl.sol:8"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ArraysImpl": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ArraysImpl.sol:7",
        "version": {
          "withMetadata": "ab785222bd847084e1fddf600d4f47cac0e40b740e463bef448cb6386f3029ad",
          "withoutMetadata": "b7e40a97cbd404d55b24bef15d2c4698a714ce8aadf40c763bed2d176ef93d2a",
          "linkedWithoutMetadata": "b7e40a97cbd404d55b24bef15d2c4698a714ce8aadf40c763bed2d176ef93d2a"
        },
        "inherit": [],
        "libraries": [
          "Arrays"
        ],
        "methods": [
          "(uint256[])",
          "findUpperBound(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArraysImpl",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ArraysImpl.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_array",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ArraysImpl",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ArraysImpl.sol:10"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ClonesMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ClonesMock.sol:8",
        "version": {
          "withMetadata": "7c873fe21ca4e8bcae19606a56caf64561d3b2821e8c6b2643ba48a3d380466e",
          "withoutMetadata": "72ccb7000275d61dd59949b18a891e408f9be4bb70ab8199159528ea9865881d",
          "linkedWithoutMetadata": "72ccb7000275d61dd59949b18a891e408f9be4bb70ab8199159528ea9865881d"
        },
        "inherit": [],
        "libraries": [
          "Address",
          "Clones"
        ],
        "methods": [
          "clone(address,bytes)",
          "cloneDeterministic(address,bytes32,bytes)",
          "predictDeterministicAddress(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ConditionalEscrowMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ConditionalEscrowMock.sol:8",
        "version": {
          "withMetadata": "c79569643e90b88f34a93d41be49229aa1818ae95e5bb60af629be2b994cfbc0",
          "withoutMetadata": "8240d5bed8c69605ad851a606c0f873dc0302a0eba80092e7c1541c4d8510404",
          "linkedWithoutMetadata": "8240d5bed8c69605ad851a606c0f873dc0302a0eba80092e7c1541c4d8510404"
        },
        "inherit": [
          "ConditionalEscrow",
          "Escrow",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "setAllowed(address,bool)",
          "withdrawalAllowed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\Escrow.sol:29"
            },
            {
              "label": "_allowed",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ConditionalEscrowMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ConditionalEscrowMock.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ContextMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ContextMock.sol:7",
        "version": {
          "withMetadata": "3629292456ac65e1fa0d667d5ff784d9d35d8e5f3038ec3c3ba9e9be256b570b",
          "withoutMetadata": "98ee03d35f3bc4c5d69221375adf7906db5e4c25e89d0480785db8cd26c656dd",
          "linkedWithoutMetadata": "98ee03d35f3bc4c5d69221375adf7906db5e4c25e89d0480785db8cd26c656dd"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "msgSender()",
          "msgData(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextMockCaller": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ContextMock.sol:21",
        "version": {
          "withMetadata": "9ea02e76c4eb703f91ed072871b4455fcb31628f8072943d87e9033034c3c99d",
          "withoutMetadata": "cd39366aff487de18e25abd165291328bd31bcadccc24e23c6e750e2370353ed",
          "linkedWithoutMetadata": "cd39366aff487de18e25abd165291328bd31bcadccc24e23c6e750e2370353ed"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callSender(address)",
          "callData(address,uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "CountersImpl": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\CountersImpl.sol:7",
        "version": {
          "withMetadata": "670234d3d34cd3724a97c960a9e67d8dc8cb8083130cfb0e0075fca15bb096d3",
          "withoutMetadata": "4c1fdfbbeceeccfae7b71acd1bdaa3c9e88e350706404213f45770f38c07e3ba",
          "linkedWithoutMetadata": "4c1fdfbbeceeccfae7b71acd1bdaa3c9e88e350706404213f45770f38c07e3ba"
        },
        "inherit": [],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "current()",
          "increment()",
          "decrement()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_counter",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Counter)15499_storage",
              "contract": "CountersImpl",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\CountersImpl.sol:10"
            }
          ],
          "types": {
            "t_struct(Counter)15499_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Create2Impl": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\Create2Impl.sol:8",
        "version": {
          "withMetadata": "428b47cf21251aa2eda6283505d3b264cbd15e277f605b91f4d214342223576f",
          "withoutMetadata": "6f66cbda037fd60216814e44c7f497d49cdb3717898c98ca2a423c2cdfae10f3",
          "linkedWithoutMetadata": "6f66cbda037fd60216814e44c7f497d49cdb3717898c98ca2a423c2cdfae10f3"
        },
        "inherit": [],
        "libraries": [
          "Create2"
        ],
        "methods": [
          "deploy(uint256,bytes32,bytes)",
          "deployERC1820Implementer(uint256,bytes32)",
          "computeAddress(bytes32,bytes32)",
          "computeAddressWithDeployer(bytes32,bytes32,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ECDSAMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ECDSAMock.sol:7",
        "version": {
          "withMetadata": "8ce5e0d7a6e5f9f5b10ff0b1726f4e31ffe296af8971db75553c1649c8b65bc4",
          "withoutMetadata": "15d5a9e0a966ac3d0ccab03be9c383716c9ba847e5d380a83373246c22e8b3e6",
          "linkedWithoutMetadata": "15d5a9e0a966ac3d0ccab03be9c383716c9ba847e5d380a83373246c22e8b3e6"
        },
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [
          "recover(bytes32,bytes)",
          "toEthSignedMessageHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "EIP712External": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\EIP712External.sol:8",
        "version": {
          "withMetadata": "5cd4889d1b72b48be294b671f2c51c8b25026d2789de77ab74a8a3784ac0cab9",
          "withoutMetadata": "baadc5583ea2dc8502870d6913e0824deb8cf162dbe2aaab62bf1219bebd1a4a",
          "linkedWithoutMetadata": "baadc5583ea2dc8502870d6913e0824deb8cf162dbe2aaab62bf1219bebd1a4a"
        },
        "inherit": [
          "EIP712"
        ],
        "libraries": [
          "ECDSA"
        ],
        "methods": [
          "(string,string)",
          "domainSeparator()",
          "verify(bytes,address,address,string)",
          "getChainId()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712External",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\EIP712External.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1155BurnableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155BurnableMock.sol:7",
        "version": {
          "withMetadata": "a754df189994e3521e2daded070bca67bf9872e3a4b1c0e52006d3cbdbb8dada",
          "withoutMetadata": "4187803ae6e9cb9d7d2133cd00ceb6a35f8673d98b25b1947e1595406013a540",
          "linkedWithoutMetadata": "4187803ae6e9cb9d7d2133cd00ceb6a35f8673d98b25b1947e1595406013a540"
        },
        "inherit": [
          "ERC1155Burnable",
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string)",
          "mint(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155BurnableMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155BurnableMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:26"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:29"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155Mock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155Mock.sol:11",
        "version": {
          "withMetadata": "fb2d068ce4891d12fdae80ec3f21a9967d21c9f55c4a91ed34fb4f9de4ff1f42",
          "withoutMetadata": "eb6570f87a0524e501ca211c15e6fba55da5c0e11ff2c03ef9b0c0e3c2e9a13b",
          "linkedWithoutMetadata": "eb6570f87a0524e501ca211c15e6fba55da5c0e11ff2c03ef9b0c0e3c2e9a13b"
        },
        "inherit": [
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string)",
          "setURI(string)",
          "mint(address,uint256,uint256,bytes)",
          "mintBatch(address,uint256[],uint256[],bytes)",
          "burn(address,uint256,uint256)",
          "burnBatch(address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155Mock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155Mock.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:26"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:29"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155PausableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155PausableMock.sol:8",
        "version": {
          "withMetadata": "2a7c206454fe8554479d996dc3ef515d509635cfa4e0c68f8cb08e65821278bb",
          "withoutMetadata": "f39a5b59bf13fe0c23dae2f5df2144d42872eeae70ce61247657c6207a4a4146",
          "linkedWithoutMetadata": "f39a5b59bf13fe0c23dae2f5df2144d42872eeae70ce61247657c6207a4a4146"
        },
        "inherit": [
          "ERC1155Pausable",
          "Pausable",
          "ERC1155Mock",
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155PausableMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155PausableMock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:26"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:29"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:32"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155ReceiverMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155ReceiverMock.sol:8",
        "version": {
          "withMetadata": "a6ae8c6e59c822888fc89d9a40de464c64e9c00385625ded8e1f60eaed822e09",
          "withoutMetadata": "2eb92556582f6dfde70b1f79406d3f63bfd0f33b4e57690a0ce0dacaed5223bc",
          "linkedWithoutMetadata": "2eb92556582f6dfde70b1f79406d3f63bfd0f33b4e57690a0ce0dacaed5223bc"
        },
        "inherit": [
          "ERC165Mock",
          "ERC165",
          "IERC1155Receiver",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(bytes4,bool,bytes4,bool)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155ReceiverMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155ReceiverMock.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_recRetval",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes4",
              "contract": "ERC1155ReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155ReceiverMock.sol:9"
            },
            {
              "label": "_recReverts",
              "offset": 4,
              "slot": "1",
              "type": "t_bool",
              "contract": "ERC1155ReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155ReceiverMock.sol:10"
            },
            {
              "label": "_batRetval",
              "offset": 5,
              "slot": "1",
              "type": "t_bytes4",
              "contract": "ERC1155ReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155ReceiverMock.sol:11"
            },
            {
              "label": "_batReverts",
              "offset": 9,
              "slot": "1",
              "type": "t_bool",
              "contract": "ERC1155ReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155ReceiverMock.sol:12"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC165InterfacesSupported": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165\\ERC165InterfacesSupported.sol:52",
        "version": {
          "withMetadata": "f21183e4eb1981e991d3561305175e990a79bb2d446ea73fb484bc944e0c4673",
          "withoutMetadata": "f21183e4eb1981e991d3561305175e990a79bb2d446ea73fb484bc944e0c4673",
          "linkedWithoutMetadata": "f21183e4eb1981e991d3561305175e990a79bb2d446ea73fb484bc944e0c4673"
        },
        "inherit": [
          "SupportsInterfaceWithLookupMock",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(bytes4[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165InterfacesSupported",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165\\ERC165InterfacesSupported.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "SupportsInterfaceWithLookupMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165\\ERC165InterfacesSupported.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SupportsInterfaceWithLookupMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165\\ERC165InterfacesSupported.sol:17",
        "version": {
          "withMetadata": "91bb212a990b7cb6427d951c1c6121bcb975ce6b28e43ba4ac3e9ce5b688863d",
          "withoutMetadata": "91bb212a990b7cb6427d951c1c6121bcb975ce6b28e43ba4ac3e9ce5b688863d",
          "linkedWithoutMetadata": "91bb212a990b7cb6427d951c1c6121bcb975ce6b28e43ba4ac3e9ce5b688863d"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SupportsInterfaceWithLookupMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165\\ERC165InterfacesSupported.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "SupportsInterfaceWithLookupMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165\\ERC165InterfacesSupported.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC165Mock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165Mock.sol:7",
        "version": {
          "withMetadata": "2790dcce39731deeec7d17d5c64e5b59dd00ba08c2b51bcdbe8a5ebf2766ce55",
          "withoutMetadata": "9bf4a8e81d82d5232f38d493bd37815a70a9bb50dd7bdea16a270a21c60d19b3",
          "linkedWithoutMetadata": "9bf4a8e81d82d5232f38d493bd37815a70a9bb50dd7bdea16a270a21c60d19b3"
        },
        "inherit": [
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "registerInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1820ImplementerMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1820ImplementerMock.sol:7",
        "version": {
          "withMetadata": "3278ca725e4d74552ec815ea14e97ff87e1fbd898842967e3337493037ecc22e",
          "withoutMetadata": "03f86dff67efa02caa243399f57f228ba8baa7137b91a7dc5874b04b11626834",
          "linkedWithoutMetadata": "03f86dff67efa02caa243399f57f228ba8baa7137b91a7dc5874b04b11626834"
        },
        "inherit": [
          "ERC1820Implementer",
          "IERC1820Implementer"
        ],
        "libraries": [],
        "methods": [
          "registerInterfaceForAddress(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
              "contract": "ERC1820Implementer",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC1820Implementer.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
              "label": "mapping(bytes32 => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20BurnableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20BurnableMock.sol:7",
        "version": {
          "withMetadata": "df72fc7aa42c9ca3dbedd690090605eaee6b36258362543141c17868cb7797bc",
          "withoutMetadata": "f00cf2673289c480c8d72c6975891425f5e7479096baf129bb729470cb59aaa5",
          "linkedWithoutMetadata": "f00cf2673289c480c8d72c6975891425f5e7479096baf129bb729470cb59aaa5"
        },
        "inherit": [
          "ERC20Burnable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20BurnableMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20BurnableMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20CappedMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20CappedMock.sol:7",
        "version": {
          "withMetadata": "145c5db5dfab5e9b01eed424fd9fd754da5a016aad480b13ab8f57c8f5388aa5",
          "withoutMetadata": "7cf57d3c23faa0481e9336c6087ca425021aac744d8588855cb18fd3c1a8771e",
          "linkedWithoutMetadata": "7cf57d3c23faa0481e9336c6087ca425021aac744d8588855cb18fd3c1a8771e"
        },
        "inherit": [
          "ERC20Capped",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20CappedMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20CappedMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_cap",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ERC20Capped",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Capped.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20DecimalsMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20DecimalsMock.sol:7",
        "version": {
          "withMetadata": "fc49f2bda11bd899aa4ee7901c47a83f4896540d14d69b1c68968c41a6f9ed93",
          "withoutMetadata": "40de248502359f91280c31e4eb4ddac83d20a334f905ba51cbce7f2cb3bfd9d1",
          "linkedWithoutMetadata": "40de248502359f91280c31e4eb4ddac83d20a334f905ba51cbce7f2cb3bfd9d1"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20DecimalsMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20DecimalsMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Mock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20Mock.sol:8",
        "version": {
          "withMetadata": "e89ea0194f8c9cf91eca668765b34e6dcbee4a4aa02a0aa5a7c2e43476c85cd2",
          "withoutMetadata": "63cce3f614b2eaa0fb9a5ad760bb068d4b4119487cc27a8d846fa525af246b9e",
          "linkedWithoutMetadata": "63cce3f614b2eaa0fb9a5ad760bb068d4b4119487cc27a8d846fa525af246b9e"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20PausableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20PausableMock.sol:8",
        "version": {
          "withMetadata": "a61eb09138eb01f79350f4f24737760ff33f4493d374c7c88e1e0b1dffda0b16",
          "withoutMetadata": "a61eb09138eb01f79350f4f24737760ff33f4493d374c7c88e1e0b1dffda0b16",
          "linkedWithoutMetadata": "a61eb09138eb01f79350f4f24737760ff33f4493d374c7c88e1e0b1dffda0b16"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,uint256)",
          "pause()",
          "unpause()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PausableMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20PausableMock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_paused",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20PermitMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20PermitMock.sol:7",
        "version": {
          "withMetadata": "449d8fcbae36abbdf3ae7ddc899b629e07c772dd1265df98875cafc8bbac9536",
          "withoutMetadata": "3c01574f00023cf07856118023176ad0c0fb3b67f03cb4e78df2c99741e9dd80",
          "linkedWithoutMetadata": "3c01574f00023cf07856118023176ad0c0fb3b67f03cb4e78df2c99741e9dd80"
        },
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,uint256)",
          "getChainId()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PermitMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20PermitMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_struct(Counter)15499_storage)",
              "contract": "ERC20Permit",
              "src": "contracts\\@openzeppelin\\contracts\\drafts\\ERC20Permit.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)15499_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)15499_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20SnapshotMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20SnapshotMock.sol:8",
        "version": {
          "withMetadata": "841d37c82d6518fbb643b73a2f6683096c4b384a9bb6fd63f3dbf9f1105998c8",
          "withoutMetadata": "df9e41a45ec000d2d74670557a7ea7d4931328488763efc2dd119c1013c3c01d",
          "linkedWithoutMetadata": "df9e41a45ec000d2d74670557a7ea7d4931328488763efc2dd119c1013c3c01d"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,uint256)",
          "snapshot()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20SnapshotMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20SnapshotMock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_accountBalanceSnapshots",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_struct(Snapshots)11862_storage)",
              "contract": "ERC20Snapshot",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Snapshot.sol:49"
            },
            {
              "label": "_totalSupplySnapshots",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Snapshots)11862_storage",
              "contract": "ERC20Snapshot",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Snapshot.sol:50"
            },
            {
              "label": "_currentSnapshotId",
              "offset": 0,
              "slot": "9",
              "type": "t_struct(Counter)15499_storage",
              "contract": "ERC20Snapshot",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Snapshot.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Snapshots)11862_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)15499_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Snapshots)11862_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721BurnableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721BurnableMock.sol:7",
        "version": {
          "withMetadata": "234a4bd6c44fce048da1409499df675047f3620e8283ab39c112ddaff4f3ef60",
          "withoutMetadata": "1be6855b66f6cf9645585f115a6c34a31bde27d34253d49810e1c1410e240ea7",
          "linkedWithoutMetadata": "1be6855b66f6cf9645585f115a6c34a31bde27d34253d49810e1c1410e240ea7"
        },
        "inherit": [
          "ERC721Burnable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721BurnableMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721BurnableMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721GSNRecipientMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721GSNRecipientMock.sol:13",
        "version": {
          "withMetadata": "387c8a8ec92624a135ff0e53a77ee420020547a52840044469048947ec0e39b2",
          "withoutMetadata": "387c8a8ec92624a135ff0e53a77ee420020547a52840044469048947ec0e39b2",
          "linkedWithoutMetadata": "387c8a8ec92624a135ff0e53a77ee420020547a52840044469048947ec0e39b2"
        },
        "inherit": [
          "GSNRecipientSignature",
          "GSNRecipient",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721GSNRecipientMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721GSNRecipientMock.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            },
            {
              "label": "_relayHub",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "GSNRecipient",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
            },
            {
              "label": "_trustedSigner",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "GSNRecipientSignature",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientSignature.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721Mock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721Mock.sol:11",
        "version": {
          "withMetadata": "8ea36b9db4bf90fd8ddd257104254cd612d35ed608e391053a8c8563bb6a9fc0",
          "withoutMetadata": "c2e016a7e7e0f405ed5003d97f77351fa03f83dabe907ee298fd490ba50987ce",
          "linkedWithoutMetadata": "c2e016a7e7e0f405ed5003d97f77351fa03f83dabe907ee298fd490ba50987ce"
        },
        "inherit": [
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "exists(uint256)",
          "setTokenURI(uint256,string)",
          "setBaseURI(string)",
          "mint(address,uint256)",
          "safeMint(address,uint256)",
          "safeMint(address,uint256,bytes)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Mock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721Mock.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721PausableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721PausableMock.sol:11",
        "version": {
          "withMetadata": "d9f7318acf986572103ecf1d37616863d7777119058e73f49c26d9047a783cfd",
          "withoutMetadata": "c5dc7071d6a53ad6b1704c19610c1df89dcbe545ec336f44339aae32d676b13c",
          "linkedWithoutMetadata": "c5dc7071d6a53ad6b1704c19610c1df89dcbe545ec336f44339aae32d676b13c"
        },
        "inherit": [
          "ERC721Pausable",
          "Pausable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(uint256)",
          "exists(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721PausableMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721PausableMock.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721ReceiverMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721ReceiverMock.sol:7",
        "version": {
          "withMetadata": "b0660578fccfcab53b5a83b887f06f66271f710c1717cb67c55a6253e36a9260",
          "withoutMetadata": "62d8672c338c40934d6fcae6c959906a04eb517071807f111c31cc2145d839db",
          "linkedWithoutMetadata": "62d8672c338c40934d6fcae6c959906a04eb517071807f111c31cc2145d839db"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(bytes4,bool)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721ReceiverMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721ReceiverMock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_retval",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes4",
              "contract": "ERC721ReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721ReceiverMock.sol:8"
            },
            {
              "label": "_reverts",
              "offset": 4,
              "slot": "0",
              "type": "t_bool",
              "contract": "ERC721ReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721ReceiverMock.sol:9"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC777Mock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC777Mock.sol:8",
        "version": {
          "withMetadata": "8a31132440dc492147802d80b5f08346e9aa9bc0e91ebb10162aef8631e6849a",
          "withoutMetadata": "8a31132440dc492147802d80b5f08346e9aa9bc0e91ebb10162aef8631e6849a",
          "linkedWithoutMetadata": "8a31132440dc492147802d80b5f08346e9aa9bc0e91ebb10162aef8631e6849a"
        },
        "inherit": [
          "ERC777",
          "IERC20",
          "IERC777",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string,address[])",
          "mintInternal(address,uint256,bytes,bytes)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC777Mock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC777Mock.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:35"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:37"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:39"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:40"
            },
            {
              "label": "_defaultOperatorsArray",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:54"
            },
            {
              "label": "_defaultOperators",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:57"
            },
            {
              "label": "_operators",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:60"
            },
            {
              "label": "_revokedDefaultOperators",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:61"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC777SenderRecipientMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC777SenderRecipientMock.sol:12",
        "version": {
          "withMetadata": "d62e86f27209a7cb3fb495e40f9a193a7f2c368e5630b602167b7d73501f15a0",
          "withoutMetadata": "ccc60690dff17ddb48038c7f5daeea1a3789ddef9be37089ed9d31344505c1f0",
          "linkedWithoutMetadata": "ccc60690dff17ddb48038c7f5daeea1a3789ddef9be37089ed9d31344505c1f0"
        },
        "inherit": [
          "ERC1820Implementer",
          "IERC1820Implementer",
          "IERC777Recipient",
          "IERC777Sender",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "tokensToSend(address,address,address,uint256,bytes,bytes)",
          "tokensReceived(address,address,address,uint256,bytes,bytes)",
          "senderFor(address)",
          "registerSender(address)",
          "recipientFor(address)",
          "registerRecipient(address)",
          "setShouldRevertSend(bool)",
          "setShouldRevertReceive(bool)",
          "send(address,address,uint256,bytes)",
          "burn(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_erc1820",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC777SenderRecipientMock.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
              "contract": "ERC1820Implementer",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC1820Implementer.sol:18"
            },
            {
              "label": "_shouldRevertSend",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "ERC777SenderRecipientMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC777SenderRecipientMock.sol:40"
            },
            {
              "label": "_shouldRevertReceive",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "ERC777SenderRecipientMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC777SenderRecipientMock.sol:41"
            },
            {
              "label": "_erc1820",
              "offset": 2,
              "slot": "1",
              "type": "t_contract(IERC1820Registry)3027",
              "contract": "ERC777SenderRecipientMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC777SenderRecipientMock.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC1820Registry)3027": {
              "label": "contract IERC1820Registry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
              "label": "mapping(bytes32 => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EnumerableMapMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableMapMock.sol:7",
        "version": {
          "withMetadata": "d109505209151fcd130b3fce1024444e9b2af621f9925b650999ea2eddbb0885",
          "withoutMetadata": "3ef121aa6afcdcb26adbb34d243dcf2acf39fd95b3a233df2a13f82908af7d58",
          "linkedWithoutMetadata": "3ef121aa6afcdcb26adbb34d243dcf2acf39fd95b3a233df2a13f82908af7d58"
        },
        "inherit": [],
        "libraries": [
          "EnumerableMap"
        ],
        "methods": [
          "contains(uint256)",
          "set(uint256,address)",
          "remove(uint256)",
          "length()",
          "at(uint256)",
          "tryGet(uint256)",
          "get(uint256)",
          "getWithMessage(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_map",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "EnumerableMapMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableMapMock.sol:12"
            }
          ],
          "types": {
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EnumerableAddressSetMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableSetMock.sol:39",
        "version": {
          "withMetadata": "676b9927746423b5047d846e9506e905652e66eee8f49ea65ff966b22a2927bf",
          "withoutMetadata": "3fea7a066c59c8e090d27a6e5ca485567c6cad238fd77b2822c87ecc9dae8fe6",
          "linkedWithoutMetadata": "3fea7a066c59c8e090d27a6e5ca485567c6cad238fd77b2822c87ecc9dae8fe6"
        },
        "inherit": [],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "contains(address)",
          "add(address)",
          "remove(address)",
          "length()",
          "at(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_set",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(AddressSet)16486_storage",
              "contract": "EnumerableAddressSetMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableSetMock.sol:44"
            }
          ],
          "types": {
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)16486_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EnumerableBytes32SetMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableSetMock.sol:8",
        "version": {
          "withMetadata": "ab57b0bb6c3ce72a72752a844223f493327d1eaa64b7d04efa698be011a1fb00",
          "withoutMetadata": "31019f79c875698f199109c3763c936b92900aae3587945447842d796274ac94",
          "linkedWithoutMetadata": "31019f79c875698f199109c3763c936b92900aae3587945447842d796274ac94"
        },
        "inherit": [],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "contains(bytes32)",
          "add(bytes32)",
          "remove(bytes32)",
          "length()",
          "at(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_set",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Bytes32Set)16401_storage",
              "contract": "EnumerableBytes32SetMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableSetMock.sol:13"
            }
          ],
          "types": {
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Set)16401_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EnumerableUintSetMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableSetMock.sol:70",
        "version": {
          "withMetadata": "954c218a9856d6a6dc88b4225d609199286512e98ea20c50fea89d5c44e1adb0",
          "withoutMetadata": "d9ea9b2b02cedffaf33c3a6b0e190ce09645cc950d83805963668e5a3eb7193c",
          "linkedWithoutMetadata": "d9ea9b2b02cedffaf33c3a6b0e190ce09645cc950d83805963668e5a3eb7193c"
        },
        "inherit": [],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "contains(uint256)",
          "add(uint256)",
          "remove(uint256)",
          "length()",
          "at(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_set",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(UintSet)16607_storage",
              "contract": "EnumerableUintSetMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableSetMock.sol:75"
            }
          ],
          "types": {
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "GSNRecipientERC20FeeMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\GSNRecipientERC20FeeMock.sol:8",
        "version": {
          "withMetadata": "a05e0b6908f56cb5fc30030f8c0aa4ec4ca380b8ff209f4b1df3cb9e96bb82ce",
          "withoutMetadata": "ffff231e9feade3caa7e49edb05c63ca6f950324087794b86ccd4a14365e2fbc",
          "linkedWithoutMetadata": "ffff231e9feade3caa7e49edb05c63ca6f950324087794b86ccd4a14365e2fbc"
        },
        "inherit": [
          "GSNRecipientERC20Fee",
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "mockFunction()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientERC20FeeMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\GSNRecipientERC20FeeMock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_relayHub",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GSNRecipient",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(__unstable__ERC20Owned)705",
              "contract": "GSNRecipientERC20Fee",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientERC20Fee.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(__unstable__ERC20Owned)705": {
              "label": "contract __unstable__ERC20Owned",
              "numberOfBytes": "20"
            },
            "t_contract$___unstable__ERC20Owned)705": {
              "label": "contract __unstable__ERC20Owned"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "GSNRecipientMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\GSNRecipientMock.sol:9",
        "version": {
          "withMetadata": "0aa19f2b5ade420ac63b23c52fbb21d6db883cc75942e7fc5ad6e80cdc7a935e",
          "withoutMetadata": "c7f572c8cecad769fb2b74f5af18568d469219053440778acda7fba09beb5a90",
          "linkedWithoutMetadata": "c7f572c8cecad769fb2b74f5af18568d469219053440778acda7fba09beb5a90"
        },
        "inherit": [
          "GSNRecipient",
          "ContextMock",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "withdrawDeposits(uint256,address payable)",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)",
          "upgradeRelayHub(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_relayHub",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GSNRecipient",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "GSNRecipientSignatureMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\GSNRecipientSignatureMock.sol:8",
        "version": {
          "withMetadata": "7b7aab8874de89f1f61991515f18c8a58e2cb8a370ddfa1df4ddd7240d7348c1",
          "withoutMetadata": "7b7aab8874de89f1f61991515f18c8a58e2cb8a370ddfa1df4ddd7240d7348c1",
          "linkedWithoutMetadata": "7b7aab8874de89f1f61991515f18c8a58e2cb8a370ddfa1df4ddd7240d7348c1"
        },
        "inherit": [
          "GSNRecipientSignature",
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "mockFunction()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientSignatureMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\GSNRecipientSignatureMock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_relayHub",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GSNRecipient",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
            },
            {
              "label": "_trustedSigner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "GSNRecipientSignature",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientSignature.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "InitializableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\InitializableMock.sol:11",
        "version": {
          "withMetadata": "b8298f7333886052df76f9430287f8518b32c7e4c0b6782dc1620afcdba86d05",
          "withoutMetadata": "7de0aae41e56b00fe0cb125396904d9f3dbebcd7abc6a142c2cd48ea2b33bfb7",
          "linkedWithoutMetadata": "7de0aae41e56b00fe0cb125396904d9f3dbebcd7abc6a142c2cd48ea2b33bfb7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "initializeNested()",
          "initializeWithX(uint256)",
          "nonInitializable(uint256)",
          "fail()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "initializerRan",
              "offset": 2,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitializableMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\InitializableMock.sol:13"
            },
            {
              "label": "x",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "InitializableMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\InitializableMock.sol:14"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MathMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\MathMock.sol:7",
        "version": {
          "withMetadata": "3cdd6ac90824f424eb996ecb1db2c8fd8ac18d35986c7bdd047b5651158e0680",
          "withoutMetadata": "fbf3567fb0f5ea1267ab0b9ad9289b99d1d3d49cc261186c878f23e5a8c36ac6",
          "linkedWithoutMetadata": "fbf3567fb0f5ea1267ab0b9ad9289b99d1d3d49cc261186c878f23e5a8c36ac6"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [
          "max(uint256,uint256)",
          "min(uint256,uint256)",
          "average(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SampleChild": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:68",
        "version": {
          "withMetadata": "632cd39f51c4b07fefee77ce85764dcd95b9e927ef91fce976ecdd4ae98eec0d",
          "withoutMetadata": "32cbe7559ce2039bd6fb3429708060db96c00b38280fb6383acd6c5ab1ba1a8b",
          "linkedWithoutMetadata": "32cbe7559ce2039bd6fb3429708060db96c00b38280fb6383acd6c5ab1ba1a8b"
        },
        "inherit": [
          "SampleFather",
          "SampleGramps",
          "SampleMother",
          "SampleHuman",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,string,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "isHuman",
              "offset": 2,
              "slot": "0",
              "type": "t_bool",
              "contract": "SampleHuman",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:22"
            },
            {
              "label": "mother",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SampleMother",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:33"
            },
            {
              "label": "gramps",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "SampleGramps",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:45"
            },
            {
              "label": "father",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SampleFather",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:57"
            },
            {
              "label": "child",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "SampleChild",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:69"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SampleFather": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:56",
        "version": {
          "withMetadata": "c849e656626917ba84c9fbaf4b030615edfc6ec4a4707528588952b3a3e16177",
          "withoutMetadata": "9343971b59f99122e853f29bf8e11c9c93e21d6d4d9b7084951bd20a349feb68",
          "linkedWithoutMetadata": "9343971b59f99122e853f29bf8e11c9c93e21d6d4d9b7084951bd20a349feb68"
        },
        "inherit": [
          "SampleGramps",
          "SampleHuman",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "isHuman",
              "offset": 2,
              "slot": "0",
              "type": "t_bool",
              "contract": "SampleHuman",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:22"
            },
            {
              "label": "gramps",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "SampleGramps",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:45"
            },
            {
              "label": "father",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "SampleFather",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:57"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SampleGramps": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:44",
        "version": {
          "withMetadata": "9ce8029870889ebd7f0548bed555ddb1dcde0d12210d4898cdacc9e7e5477f52",
          "withoutMetadata": "259ca78a835e6076685cbd768e63302cf3e0e2a0637481ddacb7c298c9ad484d",
          "linkedWithoutMetadata": "259ca78a835e6076685cbd768e63302cf3e0e2a0637481ddacb7c298c9ad484d"
        },
        "inherit": [
          "SampleHuman",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "isHuman",
              "offset": 2,
              "slot": "0",
              "type": "t_bool",
              "contract": "SampleHuman",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:22"
            },
            {
              "label": "gramps",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "SampleGramps",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:45"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SampleHuman": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:21",
        "version": {
          "withMetadata": "02be2cfe1ac6292932396635227833f63d395cfb6ab6c2672231cddbadfc2d00",
          "withoutMetadata": "c654602f06c94fab9ef6f4cc6ac4bac30ff5828c242cfc20514bb6e76be6a433",
          "linkedWithoutMetadata": "c654602f06c94fab9ef6f4cc6ac4bac30ff5828c242cfc20514bb6e76be6a433"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "isHuman",
              "offset": 2,
              "slot": "0",
              "type": "t_bool",
              "contract": "SampleHuman",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:22"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SampleMother": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:32",
        "version": {
          "withMetadata": "22b18ec599ce9a28d6303fbd8589295cfadfb881735a8b10b4dccfddde6adf6c",
          "withoutMetadata": "0ea59b3a09d6e8cf8fdc59652c2623205b0885b4c62d5f688c1e6def75b9a5d2",
          "linkedWithoutMetadata": "0ea59b3a09d6e8cf8fdc59652c2623205b0885b4c62d5f688c1e6def75b9a5d2"
        },
        "inherit": [
          "SampleHuman",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "isHuman",
              "offset": 2,
              "slot": "0",
              "type": "t_bool",
              "contract": "SampleHuman",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:22"
            },
            {
              "label": "mother",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SampleMother",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:33"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "OwnableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\OwnableMock.sol:7",
        "version": {
          "withMetadata": "ec7a012288c113f4345c03733c76649ee74023b182d40df6bbda50feaf7285f5",
          "withoutMetadata": "1a7574f3db1e1a89ffdec4897e05ec6e80da543a9c8eed0786e9650bdbc48f13",
          "linkedWithoutMetadata": "1a7574f3db1e1a89ffdec4897e05ec6e80da543a9c8eed0786e9650bdbc48f13"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PausableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\PausableMock.sol:7",
        "version": {
          "withMetadata": "33faf66c6420191ac9b91a35499596aff3bc1520fa22cadf8e6ec872aba916ca",
          "withoutMetadata": "7b0e931bd674591d523a44e7ddf42275564bf12e1ab23d11e5835d1f22102f5b",
          "linkedWithoutMetadata": "7b0e931bd674591d523a44e7ddf42275564bf12e1ab23d11e5835d1f22102f5b"
        },
        "inherit": [
          "Pausable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "normalProcess()",
          "drasticMeasure()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PausableMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\PausableMock.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            },
            {
              "label": "drasticMeasureTaken",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "PausableMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\PausableMock.sol:8"
            },
            {
              "label": "count",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "PausableMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\PausableMock.sol:9"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PullPaymentMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\PullPaymentMock.sol:8",
        "version": {
          "withMetadata": "7422d20691930a1e7bcf257ee2bd1ad1ba61e7f4433f3be3ffb12a38eaa671a6",
          "withoutMetadata": "308c94a903a89a0826a51a1c9094c90972f8ac8222015dc7dabe5667a4c3c51c",
          "linkedWithoutMetadata": "308c94a903a89a0826a51a1c9094c90972f8ac8222015dc7dabe5667a4c3c51c"
        },
        "inherit": [
          "PullPayment"
        ],
        "libraries": [],
        "methods": [
          "()",
          "callTransfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_escrow",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(Escrow)8217",
              "contract": "PullPayment",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\PullPayment.sol:26"
            }
          ],
          "types": {
            "t_contract(Escrow)8217": {
              "label": "contract Escrow",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ReentrancyAttack": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ReentrancyAttack.sol:6",
        "version": {
          "withMetadata": "c3e4f815c977238262d3e861672b0ddd0e8680f837acfb7217a0edb5aeb9e65b",
          "withoutMetadata": "76a7b112e45f8099ae28b106bbc0cd5479f731bed98897e238b5a30e0ab21838",
          "linkedWithoutMetadata": "76a7b112e45f8099ae28b106bbc0cd5479f731bed98897e238b5a30e0ab21838"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "callSender(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ReentrancyMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ReentrancyMock.sol:8",
        "version": {
          "withMetadata": "4e468fc39317923ced2434e9b4335f839f6834a5134ad7ce05852ee06a0b1437",
          "withoutMetadata": "d338592c8d80225b6271fb0d8a5dfae49050321f3cc05d16c056f60a468c2995",
          "linkedWithoutMetadata": "d338592c8d80225b6271fb0d8a5dfae49050321f3cc05d16c056f60a468c2995"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "()",
          "callback()",
          "countLocalRecursive(uint256)",
          "countThisRecursive(uint256)",
          "countAndCall(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ReentrancyMock.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:36"
            },
            {
              "label": "counter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ReentrancyMock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Implementation1": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:7",
        "version": {
          "withMetadata": "bdf071590d80170815a04892e138aa1bbc9a7e7176f5560ff740351f34af089d",
          "withoutMetadata": "7081c3c5e5dbe502409318a623de666955b5a57e44cc1527360e39baa11da5cd",
          "linkedWithoutMetadata": "7081c3c5e5dbe502409318a623de666955b5a57e44cc1527360e39baa11da5cd"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setValue(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "_value",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Implementation1",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:8"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Implementation2": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:18",
        "version": {
          "withMetadata": "1933af2ef301bf84f2d7cd6c1cb84e2d621c7a8767a84f0bed0f934a6ca98282",
          "withoutMetadata": "c86fa76877df4e21212e332a4fa33a5059d10c1b5d571f5c1fe45d827f534acb",
          "linkedWithoutMetadata": "c86fa76877df4e21212e332a4fa33a5059d10c1b5d571f5c1fe45d827f534acb"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setValue(uint256)",
          "getValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "_value",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Implementation2",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:19"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Implementation3": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:33",
        "version": {
          "withMetadata": "8cf7bc96a067891d5cc4597e5736e6cee929ac98771b5b781e81c2d9637dd756",
          "withoutMetadata": "612960a29c5da3322314fae551b961d1e822213096fb7b1dbbd8f1324960e745",
          "linkedWithoutMetadata": "612960a29c5da3322314fae551b961d1e822213096fb7b1dbbd8f1324960e745"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setValue(uint256)",
          "getValue(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "_value",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Implementation3",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:34"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Implementation4": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:48",
        "version": {
          "withMetadata": "005f23c4d943d558239253d161e321f3e1271d9ec19437562540212324086d13",
          "withoutMetadata": "90e0c804006957209f537a8183043a1731c7a2e469534d0b0976fcf4b5ed0c92",
          "linkedWithoutMetadata": "90e0c804006957209f537a8183043a1731c7a2e469534d0b0976fcf4b5ed0c92"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setValue(uint256)",
          "getValue()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "_value",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Implementation4",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:49"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20NoReturnMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:68",
        "version": {
          "withMetadata": "5ff4eee9171e12c5251659e0bef73c46d9458b5b1e83c2e09f371b632d7b13a6",
          "withoutMetadata": "3a66b89ef1b9830020ec34666c7e159fd0a29b021dac6f9781a5cd8fe49cb50d",
          "linkedWithoutMetadata": "3a66b89ef1b9830020ec34666c7e159fd0a29b021dac6f9781a5cd8fe49cb50d"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setAllowance(uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20NoReturnMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:69"
            },
            {
              "label": "_dummy",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC20NoReturnMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20ReturnFalseMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:9",
        "version": {
          "withMetadata": "438fa91ea4f1010e188d574d7bcfac18e2c7a3110171934583e50a7391fdce54",
          "withoutMetadata": "ce03d41e339371c9fba5601c5974559fe013098edfa6a3077f2f13787c33bfa8",
          "linkedWithoutMetadata": "ce03d41e339371c9fba5601c5974559fe013098edfa6a3077f2f13787c33bfa8"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_allowance",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC20ReturnFalseMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:10"
            },
            {
              "label": "_dummy",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC20ReturnFalseMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:14"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20ReturnTrueMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:37",
        "version": {
          "withMetadata": "eb6f2f1126605b38a5a66578df10445838905b72000c3c657ac7578d7f9e1bc7",
          "withoutMetadata": "f3d3ade591af398e8bf373aa1208b2343356f6d51bf5ddf2d81321c904935915",
          "linkedWithoutMetadata": "f3d3ade591af398e8bf373aa1208b2343356f6d51bf5ddf2d81321c904935915"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setAllowance(uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20ReturnTrueMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:38"
            },
            {
              "label": "_dummy",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC20ReturnTrueMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeERC20Wrapper": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:96",
        "version": {
          "withMetadata": "f621e3ead6461e1d07a7aa7a40baa8ee92105458ea701eaf4d3171f924619f74",
          "withoutMetadata": "c0c203cc6fe3923e72cfba57145289cf9a5f40837f237adc8492aebd52469381",
          "linkedWithoutMetadata": "c0c203cc6fe3923e72cfba57145289cf9a5f40837f237adc8492aebd52469381"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "transfer()",
          "transferFrom()",
          "approve(uint256)",
          "increaseAllowance(uint256)",
          "decreaseAllowance(uint256)",
          "setAllowance(uint256)",
          "allowance()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SafeERC20Wrapper",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:101"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)12232",
              "contract": "SafeERC20Wrapper",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:99"
            }
          ],
          "types": {
            "t_contract(IERC20)12232": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMathMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeMathMock.sol:7",
        "version": {
          "withMetadata": "c67aa54caa6827449ad4cd9cc1357f8293a997faff8d2ef3d3f25a6bbbe634d3",
          "withoutMetadata": "0fe889275c1b2f507d74170f1c83ca82a22d7b20c1114aae24bc0f0d9b67c407",
          "linkedWithoutMetadata": "0fe889275c1b2f507d74170f1c83ca82a22d7b20c1114aae24bc0f0d9b67c407"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "tryAdd(uint256,uint256)",
          "trySub(uint256,uint256)",
          "tryMul(uint256,uint256)",
          "tryDiv(uint256,uint256)",
          "tryMod(uint256,uint256)",
          "doAdd(uint256,uint256)",
          "doSub(uint256,uint256)",
          "doMul(uint256,uint256)",
          "doDiv(uint256,uint256)",
          "doMod(uint256,uint256)",
          "subWithMessage(uint256,uint256,string)",
          "divWithMessage(uint256,uint256,string)",
          "modWithMessage(uint256,uint256,string)",
          "addMemoryCheck()",
          "subMemoryCheck()",
          "mulMemoryCheck()",
          "divMemoryCheck()",
          "modMemoryCheck()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MigratableMockV1": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:11",
        "version": {
          "withMetadata": "bb2243c89be31a5c686c37a192de9a71d982d00596bf6e32ff01a303ce6c9215",
          "withoutMetadata": "5cc7095781f80edbd7dd1ce3ca23c8c3836df7300950141707ad3d3310a3ee07",
          "linkedWithoutMetadata": "5cc7095781f80edbd7dd1ce3ca23c8c3836df7300950141707ad3d3310a3ee07"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "x",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "MigratableMockV1",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:12"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigratableMockV2": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:23",
        "version": {
          "withMetadata": "78a75ed426f6fe84059190450715f47b40cca55f717f50f02cc4136ce0ef9fdd",
          "withoutMetadata": "93c7a86390742d13feb1e9f97fa5c1b2ebe322a6d644da091935fdbd9b52467a",
          "linkedWithoutMetadata": "93c7a86390742d13feb1e9f97fa5c1b2ebe322a6d644da091935fdbd9b52467a"
        },
        "inherit": [
          "MigratableMockV1",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "migrate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "x",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "MigratableMockV1",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:12"
            },
            {
              "label": "_migratedV2",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "MigratableMockV2",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:24"
            },
            {
              "label": "y",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "MigratableMockV2",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:25"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigratableMockV3": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:39",
        "version": {
          "withMetadata": "4316e42558fbe8c4a7c1619c9d0b30c0ed6c5035be39eea79e39e8c457026510",
          "withoutMetadata": "39cbd5b287c6895c2ccc8fa3b3ea1e1e81f8320d742ce202ba26adf121fb2ee1",
          "linkedWithoutMetadata": "39cbd5b287c6895c2ccc8fa3b3ea1e1e81f8320d742ce202ba26adf121fb2ee1"
        },
        "inherit": [
          "MigratableMockV2",
          "MigratableMockV1",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "migrate()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "x",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "MigratableMockV1",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:12"
            },
            {
              "label": "_migratedV2",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "MigratableMockV2",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:24"
            },
            {
              "label": "y",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "MigratableMockV2",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:25"
            },
            {
              "label": "_migratedV3",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "MigratableMockV3",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:40"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "StringsMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\StringsMock.sol:7",
        "version": {
          "withMetadata": "fa3f591addad90aac19d6d94b6f1ca8b8b20d5adf5fa07e0f676269025aef14f",
          "withoutMetadata": "c6b0509912bb21ec41a33b9d1e618eab4f3118ee685c70a33e12c9823c4151e5",
          "linkedWithoutMetadata": "c6b0509912bb21ec41a33b9d1e618eab4f3118ee685c70a33e12c9823c4151e5"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "fromUint256(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "PaymentSplitter": {
        "src": "contracts\\@openzeppelin\\contracts\\payment\\PaymentSplitter.sol:22",
        "version": {
          "withMetadata": "8c3322fd3963133ef3772ceab189a2efc9368c15175f556c4a913dbde67e10b6",
          "withoutMetadata": "8c3322fd3963133ef3772ceab189a2efc9368c15175f556c4a913dbde67e10b6",
          "linkedWithoutMetadata": "8c3322fd3963133ef3772ceab189a2efc9368c15175f556c4a913dbde67e10b6"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(address[],uint256[])",
          "()",
          "totalShares()",
          "totalReleased()",
          "shares(address)",
          "released(address)",
          "payee(uint256)",
          "release(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PaymentSplitter",
            "src": "contracts\\@openzeppelin\\contracts\\payment\\PaymentSplitter.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_totalShares",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "PaymentSplitter",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\PaymentSplitter.sol:29"
            },
            {
              "label": "_totalReleased",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "PaymentSplitter",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\PaymentSplitter.sol:30"
            },
            {
              "label": "_shares",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\PaymentSplitter.sol:32"
            },
            {
              "label": "_released",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\PaymentSplitter.sol:33"
            },
            {
              "label": "_payees",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PaymentSplitter",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\PaymentSplitter.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PullPayment": {
        "src": "contracts\\@openzeppelin\\contracts\\payment\\PullPayment.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawPayments(address payable)",
          "payments(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PullPayment",
            "src": "contracts\\@openzeppelin\\contracts\\payment\\PullPayment.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_escrow",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(Escrow)8217",
              "contract": "PullPayment",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\PullPayment.sol:26"
            }
          ],
          "types": {
            "t_contract(Escrow)8217": {
              "label": "contract Escrow",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ConditionalEscrow": {
        "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\ConditionalEscrow.sol:12",
        "inherit": [
          "Escrow",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "withdrawalAllowed(address)",
          "withdraw(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\Escrow.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Escrow": {
        "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\Escrow.sol:22",
        "version": {
          "withMetadata": "9ba9e212ca9e370b05b7cff893b214ca94ebbf57ac4a6e2bd7a871ec91192eba",
          "withoutMetadata": "d3b139e8291fb5df84539b408ea9a59fba7a47c3f6e6b34f9547d572d0bf0aa9",
          "linkedWithoutMetadata": "d3b139e8291fb5df84539b408ea9a59fba7a47c3f6e6b34f9547d572d0bf0aa9"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "depositsOf(address)",
          "deposit(address)",
          "withdraw(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\Escrow.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RefundEscrow": {
        "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\RefundEscrow.sol:17",
        "version": {
          "withMetadata": "29bd145cf189fe6cee68b7e40dd36e473d72b36c1874359c2fa27df1c4ae7377",
          "withoutMetadata": "29bd145cf189fe6cee68b7e40dd36e473d72b36c1874359c2fa27df1c4ae7377",
          "linkedWithoutMetadata": "29bd145cf189fe6cee68b7e40dd36e473d72b36c1874359c2fa27df1c4ae7377"
        },
        "inherit": [
          "ConditionalEscrow",
          "Escrow",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "state()",
          "beneficiary()",
          "deposit(address)",
          "close()",
          "enableRefunds()",
          "beneficiaryWithdraw()",
          "withdrawalAllowed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundEscrow",
            "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\RefundEscrow.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\Escrow.sol:29"
            },
            {
              "label": "_state",
              "offset": 0,
              "slot": "2",
              "type": "t_enum(State)8227",
              "contract": "RefundEscrow",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\RefundEscrow.sol:23"
            },
            {
              "label": "_beneficiary",
              "offset": 1,
              "slot": "2",
              "type": "t_address_payable",
              "contract": "RefundEscrow",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\RefundEscrow.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_enum(State)8227": {
              "label": "enum RefundEscrow.State",
              "members": [
                "Active",
                "Refunding",
                "Closed"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155PresetMinterPauser": {
        "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC1155PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "9282dbbd4b60af2363418fbcb0d46d7cafe8a3bfd006fc558396838e91bdd652",
          "withoutMetadata": "4c34a02689b6aabd9da15703756ecc5b6a321ed30f447475fc201bbaff60851c",
          "linkedWithoutMetadata": "4c34a02689b6aabd9da15703756ecc5b6a321ed30f447475fc201bbaff60851c"
        },
        "inherit": [
          "ERC1155Pausable",
          "Pausable",
          "ERC1155Burnable",
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "AccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string)",
          "mint(address,uint256,uint256,bytes)",
          "mintBatch(address,uint256[],uint256[],bytes)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155PresetMinterPauser",
            "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC1155PresetMinterPauser.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)",
              "contract": "AccessControl",
              "src": "contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol:53"
            },
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:26"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:29"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:32"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)16486_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)1187_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)16486_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20PresetFixedSupply": {
        "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC20PresetFixedSupply.sol:18",
        "version": {
          "withMetadata": "37cc49009ad1b358e8cf1495a2b123600a9354f769886e5afd434c4af9a0073d",
          "withoutMetadata": "c5af974b3e4da8a9885463efcff95f7ba972aa35971773407def001563a8fb62",
          "linkedWithoutMetadata": "c5af974b3e4da8a9885463efcff95f7ba972aa35971773407def001563a8fb62"
        },
        "inherit": [
          "ERC20Burnable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetFixedSupply",
            "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC20PresetFixedSupply.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "f70f8430efe367745aea45b1247aecaf66d59018fae37492dc7d6f5b323573ce",
          "withoutMetadata": "a461532f7bf184a2828fdbaaa9ffe87cf7f4d853fde0855a1d5b0dcfba517268",
          "linkedWithoutMetadata": "a461532f7bf184a2828fdbaaa9ffe87cf7f4d853fde0855a1d5b0dcfba517268"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20",
          "AccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)",
              "contract": "AccessControl",
              "src": "contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol:53"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "6",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_paused",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)16486_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)1187_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)16486_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721PresetMinterPauserAutoId": {
        "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC721PresetMinterPauserAutoId.sol:27",
        "version": {
          "withMetadata": "0759f76fc7e77eb0c3890638041691b518f310f6431549f9010e47b2d6b91fcf",
          "withoutMetadata": "c4cd09a8b10fb67a621ab6445e02b83da796fd18d5e9eedc8eb44e3b982277c2",
          "linkedWithoutMetadata": "c4cd09a8b10fb67a621ab6445e02b83da796fd18d5e9eedc8eb44e3b982277c2"
        },
        "inherit": [
          "ERC721Pausable",
          "Pausable",
          "ERC721Burnable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "AccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "(string,string,string)",
          "mint(address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721PresetMinterPauserAutoId",
            "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC721PresetMinterPauserAutoId.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)",
              "contract": "AccessControl",
              "src": "contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol:53"
            },
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "8",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "10",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            },
            {
              "label": "_tokenIdTracker",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(Counter)15499_storage",
              "contract": "ERC721PresetMinterPauserAutoId",
              "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC721PresetMinterPauserAutoId.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)16486_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)15499_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)1187_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)16486_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC777PresetFixedSupply": {
        "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC777PresetFixedSupply.sol:14",
        "version": {
          "withMetadata": "939c7be43ddd61f55d84a50663d2a106e4316842459c00f9aac87e4be7309142",
          "withoutMetadata": "939c7be43ddd61f55d84a50663d2a106e4316842459c00f9aac87e4be7309142",
          "linkedWithoutMetadata": "939c7be43ddd61f55d84a50663d2a106e4316842459c00f9aac87e4be7309142"
        },
        "inherit": [
          "ERC777",
          "IERC20",
          "IERC777",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address[],uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC777PresetFixedSupply",
            "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC777PresetFixedSupply.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:35"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:37"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:39"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:40"
            },
            {
              "label": "_defaultOperatorsArray",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:54"
            },
            {
              "label": "_defaultOperators",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:57"
            },
            {
              "label": "_operators",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:60"
            },
            {
              "label": "_revokedDefaultOperators",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:61"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BeaconProxy": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\BeaconProxy.sol:17",
        "version": {
          "withMetadata": "fbd4b53b271a4946e0cefb96d01ca9202bd4b32020021896842b0a201c1bc10f",
          "withoutMetadata": "fbd4b53b271a4946e0cefb96d01ca9202bd4b32020021896842b0a201c1bc10f",
          "linkedWithoutMetadata": "fbd4b53b271a4946e0cefb96d01ca9202bd4b32020021896842b0a201c1bc10f"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "contracts\\@openzeppelin\\contracts\\proxy\\BeaconProxy.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Clones": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\Clones.sol:18",
        "version": {
          "withMetadata": "ea6897ec13bcd8ad6a73c627b2c3fad2acdbab8dbc93ced515f99fba8f7c0cbe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBeacon": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Initializable": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Proxy": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\ProxyAdmin.sol:12",
        "version": {
          "withMetadata": "39057ad62855aaa766a9963ace05a4d3253a9ab12c1b05c82de7feb5896e49aa",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "a3315bde32d238b270311738d8eddc0dddf8d0756453085240253e2e9ce3bb98",
          "withoutMetadata": "a3315bde32d238b270311738d8eddc0dddf8d0756453085240253e2e9ce3bb98",
          "linkedWithoutMetadata": "a3315bde32d238b270311738d8eddc0dddf8d0756453085240253e2e9ce3bb98"
        },
        "inherit": [
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "contracts\\@openzeppelin\\contracts\\proxy\\TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "UpgradeableBeacon": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\UpgradeableBeacon.sol:15",
        "version": {
          "withMetadata": "b56483de44cee77d7afd96afd5d348374bee39c17e72a26ca447b898f43bfb45",
          "withoutMetadata": "b56483de44cee77d7afd96afd5d348374bee39c17e72a26ca447b898f43bfb45",
          "linkedWithoutMetadata": "b56483de44cee77d7afd96afd5d348374bee39c17e72a26ca447b898f43bfb45"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IBeacon"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "contracts\\@openzeppelin\\contracts\\proxy\\UpgradeableBeacon.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\UpgradeableBeacon.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UpgradeableProxy": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\UpgradeableProxy.sol:17",
        "version": {
          "withMetadata": "7b7ece4b4428be888ac2cd55140f4ba7e40af5847193161fd866657b966cd992",
          "withoutMetadata": "7b7ece4b4428be888ac2cd55140f4ba7e40af5847193161fd866657b966cd992",
          "linkedWithoutMetadata": "7b7ece4b4428be888ac2cd55140f4ba7e40af5847193161fd866657b966cd992"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableProxy",
            "src": "contracts\\@openzeppelin\\contracts\\proxy\\UpgradeableProxy.sol:24"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1155": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:21",
        "version": {
          "withMetadata": "b55ea18d0cab3ce2a7e46c19a7a7a046155318175b71925ed9511d44608812d3",
          "withoutMetadata": "7eacb5600acf33ec5623d51a27fdce3a7df0fd6ef90183231710542df2fa0df7",
          "linkedWithoutMetadata": "7eacb5600acf33ec5623d51a27fdce3a7df0fd6ef90183231710542df2fa0df7"
        },
        "inherit": [
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string)",
          "uri(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155",
            "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:26"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:29"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155Burnable": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155Burnable.sol:13",
        "inherit": [
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(address,uint256,uint256)",
          "burnBatch(address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:26"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:29"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155Holder": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155Holder.sol:10",
        "version": {
          "withMetadata": "e229ca86c82182810b1a1578b8b85a647c0aaeebbcc21e030d3c4239e0be28a0",
          "withoutMetadata": "62ad26db96cd21883f13a73c28056bf39ba031a2bd834cdd879c33f659b62865",
          "linkedWithoutMetadata": "62ad26db96cd21883f13a73c28056bf39ba031a2bd834cdd879c33f659b62865"
        },
        "inherit": [
          "ERC1155Receiver",
          "IERC1155Receiver",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155Pausable": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155Pausable.sol:17",
        "inherit": [
          "Pausable",
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:26"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:29"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:32"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155Receiver": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155Receiver.sol:11",
        "inherit": [
          "IERC1155Receiver",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155Receiver",
            "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155Receiver.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC1155": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC1155MetadataURI": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\IERC1155MetadataURI.sol:13",
        "inherit": [
          "IERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC1155Receiver": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\IERC1155Receiver.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "d86b2bc47b44b7c2a19b24124f76403dfbe60729e2774c1a3c60efcb54607863",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Burnable": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Capped": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Capped.sol:10",
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "cap()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Capped",
            "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Capped.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_cap",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ERC20Capped",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Capped.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Pausable": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_paused",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Snapshot": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Snapshot.sol:34",
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_accountBalanceSnapshots",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_struct(Snapshots)11862_storage)",
              "contract": "ERC20Snapshot",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Snapshot.sol:49"
            },
            {
              "label": "_totalSupplySnapshots",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Snapshots)11862_storage",
              "contract": "ERC20Snapshot",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Snapshot.sol:50"
            },
            {
              "label": "_currentSnapshotId",
              "offset": 0,
              "slot": "9",
              "type": "t_struct(Counter)15499_storage",
              "contract": "ERC20Snapshot",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Snapshot.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Snapshots)11862_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)15499_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Snapshots)11862_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "12a818c452ae755736ceddf0c956c626d33e3ebc64c61b69a815b2c58b26699d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TokenTimelock": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\TokenTimelock.sol:14",
        "version": {
          "withMetadata": "9502755be1912cb136f1083ecbd388206a67ec720a2cc874b2c5cd8680ab61ac",
          "withoutMetadata": "9502755be1912cb136f1083ecbd388206a67ec720a2cc874b2c5cd8680ab61ac",
          "linkedWithoutMetadata": "9502755be1912cb136f1083ecbd388206a67ec720a2cc874b2c5cd8680ab61ac"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "token()",
          "beneficiary()",
          "releaseTime()",
          "release()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenTimelock",
            "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\TokenTimelock.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)12232",
              "contract": "TokenTimelock",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\TokenTimelock.sol:18"
            },
            {
              "label": "_beneficiary",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TokenTimelock",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\TokenTimelock.sol:21"
            },
            {
              "label": "_releaseTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TokenTimelock",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\TokenTimelock.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)12232": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "38ad706c545561e83e0c9794d1ab5fe5ccd3467a6be4966a285cde0fc858a4e3",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721Burnable": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721Holder": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721Holder.sol:13",
        "version": {
          "withMetadata": "b1f05f4218126b8c2a8017fbe67507d65c70700ac341330a169d0a40680d3901",
          "withoutMetadata": "137df6a6efa04ae24dbffb1da379b99cbf88bb7fa99ca9af2db6ad24197185b0",
          "linkedWithoutMetadata": "137df6a6efa04ae24dbffb1da379b99cbf88bb7fa99ca9af2db6ad24197185b0"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Pausable": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Enumerable": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Metadata": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Receiver": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC777": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:29",
        "version": {
          "withMetadata": "76c7147043ca8c23a8323ca0ecf0de42f64e479de4db663d3042bc0d653d7a77",
          "withoutMetadata": "189e19651fb47f7f6f1ce4aced90f3131f2f065f440c1cf3099af73d5adce6fa",
          "linkedWithoutMetadata": "189e19651fb47f7f6f1ce4aced90f3131f2f065f440c1cf3099af73d5adce6fa"
        },
        "inherit": [
          "IERC20",
          "IERC777",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string,address[])",
          "name()",
          "symbol()",
          "decimals()",
          "granularity()",
          "totalSupply()",
          "balanceOf(address)",
          "send(address,uint256,bytes)",
          "transfer(address,uint256)",
          "burn(uint256,bytes)",
          "isOperatorFor(address,address)",
          "authorizeOperator(address)",
          "revokeOperator(address)",
          "defaultOperators()",
          "operatorSend(address,address,uint256,bytes,bytes)",
          "operatorBurn(address,uint256,bytes,bytes)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC777",
            "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:69"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:35"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:37"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:39"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:40"
            },
            {
              "label": "_defaultOperatorsArray",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:54"
            },
            {
              "label": "_defaultOperators",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:57"
            },
            {
              "label": "_operators",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:60"
            },
            {
              "label": "_revokedDefaultOperators",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:61"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC777": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\IERC777.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "granularity()",
          "totalSupply()",
          "balanceOf(address)",
          "send(address,uint256,bytes)",
          "burn(uint256,bytes)",
          "isOperatorFor(address,address)",
          "authorizeOperator(address)",
          "revokeOperator(address)",
          "defaultOperators()",
          "operatorSend(address,address,uint256,bytes,bytes)",
          "operatorBurn(address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC777Recipient": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\IERC777Recipient.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokensReceived(address,address,address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC777Sender": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\IERC777Sender.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokensToSend(address,address,address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\Address.sol:8",
        "version": {
          "withMetadata": "0ae5d4fe095b140f0c514a30fa70013f6381e1903e2abd400b1c1a3db6df5e0f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts\\@openzeppelin\\contracts\\utils\\Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Arrays": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\Arrays.sol:10",
        "version": {
          "withMetadata": "94c05001acd24a9768676694ee8bb97ee9134be5e1ac158dbf18a6e4781e0c5f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\Counters.sol:18",
        "version": {
          "withMetadata": "a6b1376c12c2aab7a9761f45f3a581b8a1a285fe567acfb7606e04114c782477",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Create2": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\Create2.sol:14",
        "version": {
          "withMetadata": "44c53a81092b7313872c750b0965a4ff07a32e598691a0a5deaa6a29cba8fd61",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "EnumerableMap": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "6249144b23fa5f90a331b7406849f6029b858b2e59ccfd3fc0e4d36f12e11e89",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "EnumerableSet": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4259827a01a2415716217a878c4e9b0132fe4397cc25fe89fcd2fb6dc3358e3a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Pausable": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ReentrancyGuard": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts\\@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Strings": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "9d285a76f7e020677213517aa49fd94bf79ccf087dd6ba0c22c8ff2460b6bf05",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "CallReceiverMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\CallReceiverMock.sol:5",
        "version": {
          "withMetadata": "887913b25e242dc4058fcf23bbc40f8cb7a8ada33bf638458360cde708bcd1d9",
          "withoutMetadata": "bf31ad3b65adf3a8313f53a9c45f3d3cd8e82fa8dd3f654b84bcfd2a342dfd56",
          "linkedWithoutMetadata": "bf31ad3b65adf3a8313f53a9c45f3d3cd8e82fa8dd3f654b84bcfd2a342dfd56"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "mockFunction()",
          "mockFunctionNonPayable()",
          "mockStaticFunction()",
          "mockFunctionRevertsNoReason()",
          "mockFunctionRevertsReason()",
          "mockFunctionThrows()",
          "mockFunctionOutOfGas()",
          "mockFunctionWritesStorage()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "sharedAnswer",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "CallReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\CallReceiverMock.sol:6"
            },
            {
              "label": "_array",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "CallReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\CallReceiverMock.sol:10"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "SignedSafeMath": {
        "src": "contracts\\@openzeppelin\\contracts\\math\\SignedSafeMath.sol:9",
        "version": {
          "withMetadata": "e551e0f60750f88ebea1ab43a1621f99278140c3bf03ee2e4c569fce230d89fd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SignedSafeMathMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SignedSafeMathMock.sol:7",
        "version": {
          "withMetadata": "4722ab7dacdc9eb3d52f3f89766ae644e6e00f8659a1f7e5948450d83c6672f8",
          "withoutMetadata": "f3942bb0d1857b55348ade780e4e2f6d99b93c93930e1da9de6599c287359a05",
          "linkedWithoutMetadata": "f3942bb0d1857b55348ade780e4e2f6d99b93c93930e1da9de6599c287359a05"
        },
        "inherit": [],
        "libraries": [
          "SignedSafeMath"
        ],
        "methods": [
          "mul(int256,int256)",
          "div(int256,int256)",
          "sub(int256,int256)",
          "add(int256,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "MerkleProof": {
        "src": "contracts\\@openzeppelin\\contracts\\cryptography\\MerkleProof.sol:8",
        "version": {
          "withMetadata": "50b0db39b5e244d58cb5142ca6496cb0bbe672325abe6be3cfde77c8db0f89bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MerkleProofWrapper": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\MerkleProofWrapper.sol:7",
        "version": {
          "withMetadata": "9e44bed6c6cedea54c743cd656f5741717f44484fef3e72df07306922af19c47",
          "withoutMetadata": "aebb2c77cd033b230bc456a3c683c9b961d14c58eb8cb3ff876711a7b5c7e86e",
          "linkedWithoutMetadata": "aebb2c77cd033b230bc456a3c683c9b961d14c58eb8cb3ff876711a7b5c7e86e"
        },
        "inherit": [],
        "libraries": [
          "MerkleProof"
        ],
        "methods": [
          "verify(bytes32[],bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "ClashingImplementation": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ClashingImplementation.sol:11",
        "version": {
          "withMetadata": "2addae8a05de242498f3a13b75f4fcca9a7e39da250d7156f479afc9a9b73428",
          "withoutMetadata": "d0120f3252c06a7fa7683d5c68918505e73d47f5ee77b3b9b48683f09a83bee1",
          "linkedWithoutMetadata": "d0120f3252c06a7fa7683d5c68918505e73d47f5ee77b3b9b48683f09a83bee1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "delegatedFunction()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Address": {
        "src": "contracts\\Tetrad.sol:212",
        "version": {
          "withMetadata": "47789ed20535a9ddcff3462783d821690d6572a6f1670b63743eb683182c8c57",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "contracts\\Tetrad.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\Tetrad.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\Tetrad.sol:401",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts\\Tetrad.sol:412",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Tetrad.sol:454",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Tetrad.sol:545",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts\\Tetrad.sol:337",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "geUnlockTime()",
          "lock(uint256)",
          "unlock()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Tetrad.sol:345"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:338"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:339"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:340"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "contracts\\Tetrad.sol:82",
        "version": {
          "withMetadata": "ef6892bff3692d4dafe96b1243866480a200274837405c103423a316bef5af3c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Tetrad": {
        "src": "contracts\\Tetrad.sol:585",
        "version": {
          "withMetadata": "ba4cf8a40d4849a04a0ce06718a057be8926f0baf68e5083756788e5f38cc8df",
          "withoutMetadata": "b857763ede1a14a274735b710970b5f299bdd541cb7c747be11a53cdb8343ac9",
          "linkedWithoutMetadata": "b857763ede1a14a274735b710970b5f299bdd541cb7c747be11a53cdb8343ac9"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcluded(address)",
          "setExcludeFromFee(address,bool)",
          "totalFees()",
          "deliver(uint256)",
          "reflectionFromToken(uint256,bool)",
          "tokenFromReflection(uint256)",
          "excludeAccount(address)",
          "includeAccount(address)",
          "isExcludedFromFee(address)",
          "manualSwap()",
          "manualSend()",
          "setSwapEnabled(bool)",
          "()",
          "_getETHBalance()",
          "_setTaxFee(uint256)",
          "_setTeamFee(uint256)",
          "_setTRADEWallet(address payable)",
          "_setMarketingWallet(address payable)",
          "_setMaxTxAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Tetrad",
            "src": "contracts\\Tetrad.sol:621"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_tTotal",
            "src": "contracts\\Tetrad.sol:595"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_rTotal",
            "src": "contracts\\Tetrad.sol:596"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\Tetrad.sol:598"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\Tetrad.sol:599"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\Tetrad.sol:600"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_taxFee",
            "src": "contracts\\Tetrad.sol:601"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_teamFee",
            "src": "contracts\\Tetrad.sol:602"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousTaxFee",
            "src": "contracts\\Tetrad.sol:603"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousTeamFee",
            "src": "contracts\\Tetrad.sol:604"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Router",
            "src": "contracts\\Tetrad.sol:607"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Pair",
            "src": "contracts\\Tetrad.sol:608"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts\\Tetrad.sol:609"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Tetrad.sol:610"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\Tetrad.sol:611"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_numOfTokensToExchangeForTeam",
            "src": "contracts\\Tetrad.sol:613"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:338"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:339"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:340"
            },
            {
              "label": "_rOwned",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:588"
            },
            {
              "label": "_tOwned",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:589"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:590"
            },
            {
              "label": "_isExcludedFromFee",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:591"
            },
            {
              "label": "_isExcluded",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:592"
            },
            {
              "label": "_excluded",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:593"
            },
            {
              "label": "_tTotal",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:595"
            },
            {
              "label": "_rTotal",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:596"
            },
            {
              "label": "_tFeeTotal",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:597"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:598"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "13",
              "type": "t_string_storage",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:599"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "14",
              "type": "t_uint8",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:600"
            },
            {
              "label": "_taxFee",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:601"
            },
            {
              "label": "_teamFee",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:602"
            },
            {
              "label": "_previousTaxFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:603"
            },
            {
              "label": "_previousTeamFee",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:604"
            },
            {
              "label": "_TRADEWalletAddress",
              "offset": 0,
              "slot": "19",
              "type": "t_address_payable",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:605"
            },
            {
              "label": "_marketingWalletAddress",
              "offset": 0,
              "slot": "20",
              "type": "t_address_payable",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:606"
            },
            {
              "label": "inSwap",
              "offset": 20,
              "slot": "20",
              "type": "t_bool",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:609"
            },
            {
              "label": "swapEnabled",
              "offset": 21,
              "slot": "20",
              "type": "t_bool",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:610"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:611"
            },
            {
              "label": "_numOfTokensToExchangeForTeam",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:613"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "DummyImplementation": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:9",
        "version": {
          "withMetadata": "7b3110aeb6d803246d7d17b2cea73f07110c1864e88ecf9b981d9a48accf48f9",
          "withoutMetadata": "e9e0a3deb0c691906ca799e5604bcdcb090e2b6f759dcc92ade6bd46284b762c",
          "linkedWithoutMetadata": "e9e0a3deb0c691906ca799e5604bcdcb090e2b6f759dcc92ade6bd46284b762c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initializeNonPayable()",
          "initializePayable()",
          "initializeNonPayableWithValue(uint256)",
          "initializePayableWithValue(uint256)",
          "initialize(uint256,string,uint256[])",
          "get()",
          "version()",
          "reverts()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "value",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "DummyImplementation",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:10"
            },
            {
              "label": "text",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DummyImplementation",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:11"
            },
            {
              "label": "values",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "DummyImplementation",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:12"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "DummyImplementationV2": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:49",
        "version": {
          "withMetadata": "fdbf04a755f529298d894895a394468314bbb1ca8bbfca2670303ce6bf62cf22",
          "withoutMetadata": "3badc4fb83edb03a66fb4df62d5725f47a3b33116f04397ce341e2333343a245",
          "linkedWithoutMetadata": "3badc4fb83edb03a66fb4df62d5725f47a3b33116f04397ce341e2333343a245"
        },
        "inherit": [
          "DummyImplementation"
        ],
        "libraries": [],
        "methods": [
          "migrate(uint256)",
          "version()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "value",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "DummyImplementation",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:10"
            },
            {
              "label": "text",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DummyImplementation",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:11"
            },
            {
              "label": "values",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "DummyImplementation",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:12"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Impl": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Address": {
        "src": "contracts\\TetradRewardPool.sol:86",
        "version": {
          "withMetadata": "af8cf12048b8a514555c66d2934258e6be4d32ba0e30f03884a6c687d78b8237",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts\\TetradRewardPool.sol:130"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20": {
        "src": "contracts\\TetradRewardPool.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IOps": {
        "src": "contracts\\TetradRewardPool.sol:185",
        "inherit": [],
        "libraries": [],
        "methods": [
          "gelato()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "OpsReady": {
        "src": "contracts\\TetradRewardPool.sol:190",
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "OpsReady",
            "src": "contracts\\TetradRewardPool.sol:198"
          },
          {
            "kind": "state-variable-immutable",
            "name": "ops",
            "src": "contracts\\TetradRewardPool.sol:191"
          },
          {
            "kind": "state-variable-immutable",
            "name": "gelato",
            "src": "contracts\\TetradRewardPool.sol:192"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "contracts\\TetradRewardPool.sol:151",
        "version": {
          "withMetadata": "823bb1bc67e40106aa97e4abc02210172f84fdd4dc6faba31ebb3c4731616671",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "contracts\\TetradRewardPool.sol:24",
        "version": {
          "withMetadata": "2e633424bb7bb0f8f7c0d1530133353abf7c1bab19e95da35eb4df4192ab95b1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TetradRewardPool": {
        "src": "contracts\\TetradRewardPool.sol:213",
        "version": {
          "withMetadata": "7858df691a7923100f82e556f9bb536a6524a42e9ecbcd03b94e069b1d614612",
          "withoutMetadata": "de577f96b7bc534b53e818636422351fd8d621bcd85d763ac968583edd73c4a1",
          "linkedWithoutMetadata": "de577f96b7bc534b53e818636422351fd8d621bcd85d763ac968583edd73c4a1"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,uint256,uint256,uint256)",
          "add(uint256,address,bool,uint256)",
          "set(uint256,uint256)",
          "getGeneratedReward(uint256,uint256)",
          "pendingTetrad(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setOperator(address)",
          "governanceRecoverUnsupported(address,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TetradRewardPool",
            "src": "contracts\\TetradRewardPool.sol:251"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts\\TetradRewardPool.sol:238"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "operator",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:217"
            },
            {
              "label": "tetrad",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)78",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:232"
            },
            {
              "label": "poolInfo",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_struct(PoolInfo)1011_storage)dyn_storage",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:234"
            },
            {
              "label": "userInfo",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1000_storage))",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:236"
            },
            {
              "label": "totalAllocPoint",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:238"
            },
            {
              "label": "poolStartTime",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:240"
            },
            {
              "label": "poolEndTime",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:241"
            },
            {
              "label": "runningTime",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:243"
            },
            {
              "label": "tetradPerSecond",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "TetradRewardPool",
              "src": "contracts\\TetradRewardPool.sol:244"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PoolInfo)1011_storage)dyn_storage": {
              "label": "struct TetradRewardPool.PoolInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)78": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(UserInfo)1000_storage)": {
              "label": "mapping(address => struct TetradRewardPool.UserInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1000_storage))": {
              "label": "mapping(uint256 => mapping(address => struct TetradRewardPool.UserInfo))",
              "numberOfBytes": "32"
            },
            "t_struct(PoolInfo)1011_storage": {
              "label": "struct TetradRewardPool.PoolInfo",
              "members": [
                {
                  "label": "token",
                  "type": "t_contract(IERC20)78",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "accTetradPerTetrad",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isStarted",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(UserInfo)1000_storage": {
              "label": "struct TetradRewardPool.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "ERC165Checker": {
        "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165Checker.sol:12",
        "version": {
          "withMetadata": "0862a6d1231cbd7c151d62ce379500fb9e4f0c13b4380432b3bbf1ab9cf8d685",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165CheckerMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165CheckerMock.sol:7",
        "version": {
          "withMetadata": "c4f317181b407ebe58b6177b19292620f177e4a6b9fab33394b58280e95c1def",
          "withoutMetadata": "62d266a4cf9845a739625e463b3aed6a7cae71b5cbaedc56033678ea2d0a0d33",
          "linkedWithoutMetadata": "62d266a4cf9845a739625e463b3aed6a7cae71b5cbaedc56033678ea2d0a0d33"
        },
        "inherit": [],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "supportsERC165(address)",
          "supportsInterface(address,bytes4)",
          "supportsAllInterfaces(address,bytes4[])",
          "getSupportedInterfaces(address,bytes4[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "BadBeaconNoImpl": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\BadBeacon.sol:5",
        "version": {
          "withMetadata": "8522561c172cafd698133fa0119953927dbd62e6565f8cefa62e96f45377d4cf",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "BadBeaconNotContract": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\BadBeacon.sol:8",
        "version": {
          "withMetadata": "d4a14219105324c055ce487f889a975522036dccc23f59ddabed8f1aba05d070",
          "withoutMetadata": "8b811ce4dd4bf256a030f3defcf648a4996148a7caaf3b2b54d151eaee80768a",
          "linkedWithoutMetadata": "8b811ce4dd4bf256a030f3defcf648a4996148a7caaf3b2b54d151eaee80768a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "SafeCastMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeCastMock.sol:7",
        "version": {
          "withMetadata": "6ec268b1e76b02fb9e0fab45bb71d49f18236e094f08a8d3af561337068ea44c",
          "withoutMetadata": "f134841aca76666e85e4e3183011fd706df8a945ed867e0188590aa6a4093b29",
          "linkedWithoutMetadata": "f134841aca76666e85e4e3183011fd706df8a945ed867e0188590aa6a4093b29"
        },
        "inherit": [],
        "libraries": [
          "SafeCast"
        ],
        "methods": [
          "toUint256(int256)",
          "toInt256(uint256)",
          "toUint128(uint256)",
          "toUint64(uint256)",
          "toUint32(uint256)",
          "toUint16(uint256)",
          "toUint8(uint256)",
          "toInt128(int256)",
          "toInt64(int256)",
          "toInt32(int256)",
          "toInt16(int256)",
          "toInt8(int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeCast": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\SafeCast.sol:21",
        "version": {
          "withMetadata": "7cba2738190d4107b4657273eea2fd9548497060ec330f4593a8fd9edf73d181",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "EtherReceiverMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\EtherReceiverMock.sol:5",
        "version": {
          "withMetadata": "22ec42cfad46991bdb0f10ced3a5430cdacf4b0e1cfacf92c88d5c26c051cf89",
          "withoutMetadata": "0ba4b255589edd9a68fb5e5d981245be695b52377736469ff6c4bac16282c519",
          "linkedWithoutMetadata": "0ba4b255589edd9a68fb5e5d981245be695b52377736469ff6c4bac16282c519"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAcceptEther(bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_acceptEther",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "EtherReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\EtherReceiverMock.sol:6"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "ERC165NotSupported": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165\\ERC165NotSupported.sol:5",
        "version": {
          "withMetadata": "47ae5edfcc5183692e5a4c85b24df2806e9ab5aa1e27766f501a97eab06ca5bc",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Address": {
        "src": "contracts\\Tetrad.sol:212",
        "version": {
          "withMetadata": "fe561d6af961c041bc0c38fef978f0b31931f67202efaada69460e7afae3a4b6",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "contracts\\Tetrad.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Tetrad": {
        "src": "contracts\\Tetrad.sol:585",
        "version": {
          "withMetadata": "54e345a8558aa640876bee4432b0314e2e886f6c2db8b34bade83efd35db9da3",
          "withoutMetadata": "88b27b1526b91ac5dac4dd2e98932ec53dc32768304c30ff21a16365cfcfda3a",
          "linkedWithoutMetadata": "88b27b1526b91ac5dac4dd2e98932ec53dc32768304c30ff21a16365cfcfda3a"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcluded(address)",
          "setExcludeFromFee(address,bool)",
          "totalFees()",
          "deliver(uint256)",
          "reflectionFromToken(uint256,bool)",
          "tokenFromReflection(uint256)",
          "excludeAccount(address)",
          "includeAccount(address)",
          "isExcludedFromFee(address)",
          "manualSwap()",
          "manualSend()",
          "setSwapEnabled(bool)",
          "()",
          "_getETHBalance()",
          "_setTaxFee(uint256)",
          "_setTeamFee(uint256)",
          "_setTRADEWallet(address payable)",
          "_setMarketingWallet(address payable)",
          "_setMaxTxAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Tetrad",
            "src": "contracts\\Tetrad.sol:621"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_tTotal",
            "src": "contracts\\Tetrad.sol:595"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_rTotal",
            "src": "contracts\\Tetrad.sol:596"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\Tetrad.sol:598"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\Tetrad.sol:599"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\Tetrad.sol:600"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_taxFee",
            "src": "contracts\\Tetrad.sol:601"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_teamFee",
            "src": "contracts\\Tetrad.sol:602"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousTaxFee",
            "src": "contracts\\Tetrad.sol:603"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousTeamFee",
            "src": "contracts\\Tetrad.sol:604"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Router",
            "src": "contracts\\Tetrad.sol:607"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Pair",
            "src": "contracts\\Tetrad.sol:608"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts\\Tetrad.sol:609"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Tetrad.sol:610"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\Tetrad.sol:611"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_numOfTokensToExchangeForTeam",
            "src": "contracts\\Tetrad.sol:613"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:338"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:339"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:340"
            },
            {
              "label": "_rOwned",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:588"
            },
            {
              "label": "_tOwned",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:589"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:590"
            },
            {
              "label": "_isExcludedFromFee",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:591"
            },
            {
              "label": "_isExcluded",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:592"
            },
            {
              "label": "_excluded",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:593"
            },
            {
              "label": "_tTotal",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:595"
            },
            {
              "label": "_rTotal",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:596"
            },
            {
              "label": "_tFeeTotal",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:597"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:598"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "13",
              "type": "t_string_storage",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:599"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "14",
              "type": "t_uint8",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:600"
            },
            {
              "label": "_taxFee",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:601"
            },
            {
              "label": "_teamFee",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:602"
            },
            {
              "label": "_previousTaxFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:603"
            },
            {
              "label": "_previousTeamFee",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:604"
            },
            {
              "label": "_TRADEWalletAddress",
              "offset": 0,
              "slot": "19",
              "type": "t_address_payable",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:605"
            },
            {
              "label": "_marketingWalletAddress",
              "offset": 0,
              "slot": "20",
              "type": "t_address_payable",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:606"
            },
            {
              "label": "inSwap",
              "offset": 20,
              "slot": "20",
              "type": "t_bool",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:609"
            },
            {
              "label": "swapEnabled",
              "offset": 21,
              "slot": "20",
              "type": "t_bool",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:610"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:611"
            },
            {
              "label": "_numOfTokensToExchangeForTeam",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:613"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "contracts\\Tetrad.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\Tetrad.sol:401",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts\\Tetrad.sol:412",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Tetrad.sol:454",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Tetrad.sol:545",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts\\Tetrad.sol:337",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "geUnlockTime()",
          "lock(uint256)",
          "unlock()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Tetrad.sol:345"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:338"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:339"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:340"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "contracts\\Tetrad.sol:82",
        "version": {
          "withMetadata": "03a5c0a6d3eee23987c017d76b415b3b63cdb6806c6b9ce39e0bb65987865aa5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "GSNRecipient": {
        "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:20",
        "inherit": [
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "getHubAddr()",
          "relayHubVersion()",
          "preRelayedCall(bytes)",
          "postRelayedCall(bytes,bool,uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_relayHub",
            "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_relayHub",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GSNRecipient",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "GSNRecipientERC20Fee": {
        "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientERC20Fee.sol:20",
        "version": {
          "withMetadata": "37aeee555359f542b4da6ea92937140321ba41409f1d13821e4b119fe7a0cc40",
          "withoutMetadata": "e943b080b74c690cc4d05805c2c9d128b90ee9fa88eb085f895bc6c81ff891ed",
          "linkedWithoutMetadata": "e943b080b74c690cc4d05805c2c9d128b90ee9fa88eb085f895bc6c81ff891ed"
        },
        "inherit": [
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "token()",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientERC20Fee",
            "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientERC20Fee.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_relayHub",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GSNRecipient",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(__unstable__ERC20Owned)705",
              "contract": "GSNRecipientERC20Fee",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientERC20Fee.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(__unstable__ERC20Owned)705": {
              "label": "contract __unstable__ERC20Owned",
              "numberOfBytes": "20"
            },
            "t_contract$___unstable__ERC20Owned)705": {
              "label": "contract __unstable__ERC20Owned"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "__unstable__ERC20Owned": {
        "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientERC20Fee.sol:118",
        "version": {
          "withMetadata": "d8ac1af26a244eb6fad12eeeaf631751cc0cb2a1b52a5105764ba0fd03c58e6d",
          "withoutMetadata": "cc222a2fe6c98b480ef2b8bddebf1099d150493d09d08a65587ade2f77ab260a",
          "linkedWithoutMetadata": "cc222a2fe6c98b480ef2b8bddebf1099d150493d09d08a65587ade2f77ab260a"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "allowance(address,address)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "__unstable__ERC20Owned",
            "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientERC20Fee.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_owner",
              "offset": 1,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "GSNRecipientSignature": {
        "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientSignature.sol:14",
        "version": {
          "withMetadata": "0531c4267201deb946c81963b80ca8bdd1b3c344ba9a8e976de4d969287e39ab",
          "withoutMetadata": "0531c4267201deb946c81963b80ca8bdd1b3c344ba9a8e976de4d969287e39ab",
          "linkedWithoutMetadata": "0531c4267201deb946c81963b80ca8bdd1b3c344ba9a8e976de4d969287e39ab"
        },
        "inherit": [
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [
          "ECDSA"
        ],
        "methods": [
          "(address)",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientSignature",
            "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientSignature.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_relayHub",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GSNRecipient",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
            },
            {
              "label": "_trustedSigner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "GSNRecipientSignature",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientSignature.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IRelayHub": {
        "src": "contracts\\@openzeppelin\\contracts\\GSN\\IRelayHub.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "stake(address,uint256)",
          "registerRelay(uint256,string)",
          "removeRelayByOwner(address)",
          "unstake(address)",
          "getRelay(address)",
          "depositFor(address)",
          "balanceOf(address)",
          "withdraw(uint256,address payable)",
          "canRelay(address,address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes)",
          "relayCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes)",
          "requiredGas(uint256)",
          "maxPossibleCharge(uint256,uint256,uint256)",
          "penalizeRepeatedNonce(bytes,bytes,bytes,bytes)",
          "penalizeIllegalTransaction(bytes,bytes)",
          "getNonce(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IRelayRecipient": {
        "src": "contracts\\@openzeppelin\\contracts\\GSN\\IRelayRecipient.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getHubAddr()",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)",
          "preRelayedCall(bytes)",
          "postRelayedCall(bytes,bool,uint256,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControl": {
        "src": "contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol:44",
        "inherit": [
          "Context"
        ],
        "libraries": [
          "EnumerableSet",
          "Address"
        ],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleMemberCount(bytes32)",
          "getRoleMember(bytes32,uint256)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)",
              "contract": "AccessControl",
              "src": "contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol:53"
            }
          ],
          "types": {
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)16486_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)1187_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)16486_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Ownable": {
        "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TimelockController": {
        "src": "contracts\\@openzeppelin\\contracts\\access\\TimelockController.sol:24",
        "version": {
          "withMetadata": "fe603694a8eb654af776bfa1d4e2a130fa91c02eb4cd51973e23f959b8d95a7f",
          "withoutMetadata": "fe603694a8eb654af776bfa1d4e2a130fa91c02eb4cd51973e23f959b8d95a7f",
          "linkedWithoutMetadata": "fe603694a8eb654af776bfa1d4e2a130fa91c02eb4cd51973e23f959b8d95a7f"
        },
        "inherit": [
          "AccessControl",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address[],address[])",
          "()",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimelockController",
            "src": "contracts\\@openzeppelin\\contracts\\access\\TimelockController.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)",
              "contract": "AccessControl",
              "src": "contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol:53"
            },
            {
              "label": "_timestamps",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "TimelockController",
              "src": "contracts\\@openzeppelin\\contracts\\access\\TimelockController.sol:31"
            },
            {
              "label": "_minDelay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TimelockController",
              "src": "contracts\\@openzeppelin\\contracts\\access\\TimelockController.sol:32"
            }
          ],
          "types": {
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)16486_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)1187_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)16486_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ECDSA": {
        "src": "contracts\\@openzeppelin\\contracts\\cryptography\\ECDSA.sol:11",
        "version": {
          "withMetadata": "d7ceefb8cb5f0f9bd79ac798866afeb4f7e4b26cff497751745cd0fc55d10d51",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "EIP712": {
        "src": "contracts\\@openzeppelin\\contracts\\drafts\\EIP712.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\EIP712.sol:48"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\EIP712.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\EIP712.sol:29"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\EIP712.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\EIP712.sol:32"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\EIP712.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20Permit": {
        "src": "contracts\\@openzeppelin\\contracts\\drafts\\ERC20Permit.sol:21",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\ERC20Permit.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\ERC20Permit.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\@openzeppelin\\contracts\\drafts\\ERC20Permit.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_struct(Counter)15499_storage)",
              "contract": "ERC20Permit",
              "src": "contracts\\@openzeppelin\\contracts\\drafts\\ERC20Permit.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)15499_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)15499_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20Permit": {
        "src": "contracts\\@openzeppelin\\contracts\\drafts\\IERC20Permit.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165": {
        "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165",
            "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1820Implementer": {
        "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC1820Implementer.sol:15",
        "version": {
          "withMetadata": "8f41d00e3e40d4a91aa60d45ef9228f23cb01b6a9a0204efedf188139f693bb1",
          "withoutMetadata": "28bba79feaa51369f1fce54fac166d60a6bb8d5b9800c7fff2e620c9ba6a4dfd",
          "linkedWithoutMetadata": "28bba79feaa51369f1fce54fac166d60a6bb8d5b9800c7fff2e620c9ba6a4dfd"
        },
        "inherit": [
          "IERC1820Implementer"
        ],
        "libraries": [],
        "methods": [
          "canImplementInterfaceForAddress(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
              "contract": "ERC1820Implementer",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC1820Implementer.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
              "label": "mapping(bytes32 => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC165": {
        "src": "contracts\\@openzeppelin\\contracts\\introspection\\IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC1820Implementer": {
        "src": "contracts\\@openzeppelin\\contracts\\introspection\\IERC1820Implementer.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "canImplementInterfaceForAddress(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC1820Registry": {
        "src": "contracts\\@openzeppelin\\contracts\\introspection\\IERC1820Registry.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setManager(address,address)",
          "getManager(address)",
          "setInterfaceImplementer(address,bytes32,address)",
          "getInterfaceImplementer(address,bytes32)",
          "interfaceHash(string)",
          "updateERC165Cache(address,bytes4)",
          "implementsERC165Interface(address,bytes4)",
          "implementsERC165InterfaceNoCache(address,bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Math": {
        "src": "contracts\\@openzeppelin\\contracts\\math\\Math.sol:8",
        "version": {
          "withMetadata": "4ed0fe27d239695599c39679c57d99a99735e1c02c523fb096caf515cef3642c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "contracts\\@openzeppelin\\contracts\\math\\SafeMath.sol:18",
        "version": {
          "withMetadata": "fff2b425b20312c8608086251ee0210a51da617035408ce3754ffa27e67be012",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "AccessControlMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\AccessControlMock.sol:7",
        "version": {
          "withMetadata": "b7e5bebf7cf4c8791794d23b4bd26d9bdca91d6956a942f9044b0ff067f41d9b",
          "withoutMetadata": "cc96a527da4a0d4a9612219f4efb0852d2a4a8995c22e1879e5f2bff162e94ce",
          "linkedWithoutMetadata": "cc96a527da4a0d4a9612219f4efb0852d2a4a8995c22e1879e5f2bff162e94ce"
        },
        "inherit": [
          "AccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setRoleAdmin(bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccessControlMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\AccessControlMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)",
              "contract": "AccessControl",
              "src": "contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol:53"
            }
          ],
          "types": {
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)16486_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)1187_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)16486_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AddressImpl": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\AddressImpl.sol:7",
        "version": {
          "withMetadata": "bdef85bf3e46e2e515ccaa09b1433ac54d71fc53f25da62838630be26818d4f2",
          "withoutMetadata": "798d5386e89ca6f822264433b90c781b2e36d086525f1b8e8f6f4257b40ce77f",
          "linkedWithoutMetadata": "798d5386e89ca6f822264433b90c781b2e36d086525f1b8e8f6f4257b40ce77f"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "isContract(address)",
          "sendValue(address payable,uint256)",
          "functionCall(address,bytes)",
          "functionCallWithValue(address,bytes,uint256)",
          "functionStaticCall(address,bytes)",
          "functionDelegateCall(address,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "sharedAnswer",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "AddressImpl",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\AddressImpl.sol:8"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ArraysImpl": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ArraysImpl.sol:7",
        "version": {
          "withMetadata": "ab785222bd847084e1fddf600d4f47cac0e40b740e463bef448cb6386f3029ad",
          "withoutMetadata": "b7e40a97cbd404d55b24bef15d2c4698a714ce8aadf40c763bed2d176ef93d2a",
          "linkedWithoutMetadata": "b7e40a97cbd404d55b24bef15d2c4698a714ce8aadf40c763bed2d176ef93d2a"
        },
        "inherit": [],
        "libraries": [
          "Arrays"
        ],
        "methods": [
          "(uint256[])",
          "findUpperBound(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ArraysImpl",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ArraysImpl.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_array",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ArraysImpl",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ArraysImpl.sol:10"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ClonesMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ClonesMock.sol:8",
        "version": {
          "withMetadata": "7c873fe21ca4e8bcae19606a56caf64561d3b2821e8c6b2643ba48a3d380466e",
          "withoutMetadata": "72ccb7000275d61dd59949b18a891e408f9be4bb70ab8199159528ea9865881d",
          "linkedWithoutMetadata": "72ccb7000275d61dd59949b18a891e408f9be4bb70ab8199159528ea9865881d"
        },
        "inherit": [],
        "libraries": [
          "Address",
          "Clones"
        ],
        "methods": [
          "clone(address,bytes)",
          "cloneDeterministic(address,bytes32,bytes)",
          "predictDeterministicAddress(address,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ConditionalEscrowMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ConditionalEscrowMock.sol:8",
        "version": {
          "withMetadata": "c79569643e90b88f34a93d41be49229aa1818ae95e5bb60af629be2b994cfbc0",
          "withoutMetadata": "8240d5bed8c69605ad851a606c0f873dc0302a0eba80092e7c1541c4d8510404",
          "linkedWithoutMetadata": "8240d5bed8c69605ad851a606c0f873dc0302a0eba80092e7c1541c4d8510404"
        },
        "inherit": [
          "ConditionalEscrow",
          "Escrow",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "setAllowed(address,bool)",
          "withdrawalAllowed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\Escrow.sol:29"
            },
            {
              "label": "_allowed",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ConditionalEscrowMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ConditionalEscrowMock.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ContextMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ContextMock.sol:7",
        "version": {
          "withMetadata": "3629292456ac65e1fa0d667d5ff784d9d35d8e5f3038ec3c3ba9e9be256b570b",
          "withoutMetadata": "98ee03d35f3bc4c5d69221375adf7906db5e4c25e89d0480785db8cd26c656dd",
          "linkedWithoutMetadata": "98ee03d35f3bc4c5d69221375adf7906db5e4c25e89d0480785db8cd26c656dd"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "msgSender()",
          "msgData(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ContextMockCaller": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ContextMock.sol:21",
        "version": {
          "withMetadata": "9ea02e76c4eb703f91ed072871b4455fcb31628f8072943d87e9033034c3c99d",
          "withoutMetadata": "cd39366aff487de18e25abd165291328bd31bcadccc24e23c6e750e2370353ed",
          "linkedWithoutMetadata": "cd39366aff487de18e25abd165291328bd31bcadccc24e23c6e750e2370353ed"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "callSender(address)",
          "callData(address,uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "CountersImpl": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\CountersImpl.sol:7",
        "version": {
          "withMetadata": "670234d3d34cd3724a97c960a9e67d8dc8cb8083130cfb0e0075fca15bb096d3",
          "withoutMetadata": "4c1fdfbbeceeccfae7b71acd1bdaa3c9e88e350706404213f45770f38c07e3ba",
          "linkedWithoutMetadata": "4c1fdfbbeceeccfae7b71acd1bdaa3c9e88e350706404213f45770f38c07e3ba"
        },
        "inherit": [],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "current()",
          "increment()",
          "decrement()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_counter",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Counter)15499_storage",
              "contract": "CountersImpl",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\CountersImpl.sol:10"
            }
          ],
          "types": {
            "t_struct(Counter)15499_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Create2Impl": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\Create2Impl.sol:8",
        "version": {
          "withMetadata": "428b47cf21251aa2eda6283505d3b264cbd15e277f605b91f4d214342223576f",
          "withoutMetadata": "6f66cbda037fd60216814e44c7f497d49cdb3717898c98ca2a423c2cdfae10f3",
          "linkedWithoutMetadata": "6f66cbda037fd60216814e44c7f497d49cdb3717898c98ca2a423c2cdfae10f3"
        },
        "inherit": [],
        "libraries": [
          "Create2"
        ],
        "methods": [
          "deploy(uint256,bytes32,bytes)",
          "deployERC1820Implementer(uint256,bytes32)",
          "computeAddress(bytes32,bytes32)",
          "computeAddressWithDeployer(bytes32,bytes32,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ECDSAMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ECDSAMock.sol:7",
        "version": {
          "withMetadata": "8ce5e0d7a6e5f9f5b10ff0b1726f4e31ffe296af8971db75553c1649c8b65bc4",
          "withoutMetadata": "15d5a9e0a966ac3d0ccab03be9c383716c9ba847e5d380a83373246c22e8b3e6",
          "linkedWithoutMetadata": "15d5a9e0a966ac3d0ccab03be9c383716c9ba847e5d380a83373246c22e8b3e6"
        },
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [
          "recover(bytes32,bytes)",
          "toEthSignedMessageHash(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "EIP712External": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\EIP712External.sol:8",
        "version": {
          "withMetadata": "5cd4889d1b72b48be294b671f2c51c8b25026d2789de77ab74a8a3784ac0cab9",
          "withoutMetadata": "baadc5583ea2dc8502870d6913e0824deb8cf162dbe2aaab62bf1219bebd1a4a",
          "linkedWithoutMetadata": "baadc5583ea2dc8502870d6913e0824deb8cf162dbe2aaab62bf1219bebd1a4a"
        },
        "inherit": [
          "EIP712"
        ],
        "libraries": [
          "ECDSA"
        ],
        "methods": [
          "(string,string)",
          "domainSeparator()",
          "verify(bytes,address,address,string)",
          "getChainId()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712External",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\EIP712External.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1155BurnableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155BurnableMock.sol:7",
        "version": {
          "withMetadata": "a754df189994e3521e2daded070bca67bf9872e3a4b1c0e52006d3cbdbb8dada",
          "withoutMetadata": "4187803ae6e9cb9d7d2133cd00ceb6a35f8673d98b25b1947e1595406013a540",
          "linkedWithoutMetadata": "4187803ae6e9cb9d7d2133cd00ceb6a35f8673d98b25b1947e1595406013a540"
        },
        "inherit": [
          "ERC1155Burnable",
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string)",
          "mint(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155BurnableMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155BurnableMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:26"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:29"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155Mock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155Mock.sol:11",
        "version": {
          "withMetadata": "fb2d068ce4891d12fdae80ec3f21a9967d21c9f55c4a91ed34fb4f9de4ff1f42",
          "withoutMetadata": "eb6570f87a0524e501ca211c15e6fba55da5c0e11ff2c03ef9b0c0e3c2e9a13b",
          "linkedWithoutMetadata": "eb6570f87a0524e501ca211c15e6fba55da5c0e11ff2c03ef9b0c0e3c2e9a13b"
        },
        "inherit": [
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string)",
          "setURI(string)",
          "mint(address,uint256,uint256,bytes)",
          "mintBatch(address,uint256[],uint256[],bytes)",
          "burn(address,uint256,uint256)",
          "burnBatch(address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155Mock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155Mock.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:26"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:29"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155PausableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155PausableMock.sol:8",
        "version": {
          "withMetadata": "2a7c206454fe8554479d996dc3ef515d509635cfa4e0c68f8cb08e65821278bb",
          "withoutMetadata": "f39a5b59bf13fe0c23dae2f5df2144d42872eeae70ce61247657c6207a4a4146",
          "linkedWithoutMetadata": "f39a5b59bf13fe0c23dae2f5df2144d42872eeae70ce61247657c6207a4a4146"
        },
        "inherit": [
          "ERC1155Pausable",
          "Pausable",
          "ERC1155Mock",
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155PausableMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155PausableMock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:26"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:29"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:32"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155ReceiverMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155ReceiverMock.sol:8",
        "version": {
          "withMetadata": "a6ae8c6e59c822888fc89d9a40de464c64e9c00385625ded8e1f60eaed822e09",
          "withoutMetadata": "2eb92556582f6dfde70b1f79406d3f63bfd0f33b4e57690a0ce0dacaed5223bc",
          "linkedWithoutMetadata": "2eb92556582f6dfde70b1f79406d3f63bfd0f33b4e57690a0ce0dacaed5223bc"
        },
        "inherit": [
          "ERC165Mock",
          "ERC165",
          "IERC1155Receiver",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(bytes4,bool,bytes4,bool)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155ReceiverMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155ReceiverMock.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_recRetval",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes4",
              "contract": "ERC1155ReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155ReceiverMock.sol:9"
            },
            {
              "label": "_recReverts",
              "offset": 4,
              "slot": "1",
              "type": "t_bool",
              "contract": "ERC1155ReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155ReceiverMock.sol:10"
            },
            {
              "label": "_batRetval",
              "offset": 5,
              "slot": "1",
              "type": "t_bytes4",
              "contract": "ERC1155ReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155ReceiverMock.sol:11"
            },
            {
              "label": "_batReverts",
              "offset": 9,
              "slot": "1",
              "type": "t_bool",
              "contract": "ERC1155ReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1155ReceiverMock.sol:12"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC165InterfacesSupported": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165\\ERC165InterfacesSupported.sol:52",
        "version": {
          "withMetadata": "f21183e4eb1981e991d3561305175e990a79bb2d446ea73fb484bc944e0c4673",
          "withoutMetadata": "f21183e4eb1981e991d3561305175e990a79bb2d446ea73fb484bc944e0c4673",
          "linkedWithoutMetadata": "f21183e4eb1981e991d3561305175e990a79bb2d446ea73fb484bc944e0c4673"
        },
        "inherit": [
          "SupportsInterfaceWithLookupMock",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "(bytes4[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC165InterfacesSupported",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165\\ERC165InterfacesSupported.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "SupportsInterfaceWithLookupMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165\\ERC165InterfacesSupported.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SupportsInterfaceWithLookupMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165\\ERC165InterfacesSupported.sol:17",
        "version": {
          "withMetadata": "91bb212a990b7cb6427d951c1c6121bcb975ce6b28e43ba4ac3e9ce5b688863d",
          "withoutMetadata": "91bb212a990b7cb6427d951c1c6121bcb975ce6b28e43ba4ac3e9ce5b688863d",
          "linkedWithoutMetadata": "91bb212a990b7cb6427d951c1c6121bcb975ce6b28e43ba4ac3e9ce5b688863d"
        },
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SupportsInterfaceWithLookupMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165\\ERC165InterfacesSupported.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "SupportsInterfaceWithLookupMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165\\ERC165InterfacesSupported.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC165Mock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165Mock.sol:7",
        "version": {
          "withMetadata": "2790dcce39731deeec7d17d5c64e5b59dd00ba08c2b51bcdbe8a5ebf2766ce55",
          "withoutMetadata": "9bf4a8e81d82d5232f38d493bd37815a70a9bb50dd7bdea16a270a21c60d19b3",
          "linkedWithoutMetadata": "9bf4a8e81d82d5232f38d493bd37815a70a9bb50dd7bdea16a270a21c60d19b3"
        },
        "inherit": [
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "registerInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1820ImplementerMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC1820ImplementerMock.sol:7",
        "version": {
          "withMetadata": "3278ca725e4d74552ec815ea14e97ff87e1fbd898842967e3337493037ecc22e",
          "withoutMetadata": "03f86dff67efa02caa243399f57f228ba8baa7137b91a7dc5874b04b11626834",
          "linkedWithoutMetadata": "03f86dff67efa02caa243399f57f228ba8baa7137b91a7dc5874b04b11626834"
        },
        "inherit": [
          "ERC1820Implementer",
          "IERC1820Implementer"
        ],
        "libraries": [],
        "methods": [
          "registerInterfaceForAddress(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
              "contract": "ERC1820Implementer",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC1820Implementer.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
              "label": "mapping(bytes32 => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20BurnableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20BurnableMock.sol:7",
        "version": {
          "withMetadata": "df72fc7aa42c9ca3dbedd690090605eaee6b36258362543141c17868cb7797bc",
          "withoutMetadata": "f00cf2673289c480c8d72c6975891425f5e7479096baf129bb729470cb59aaa5",
          "linkedWithoutMetadata": "f00cf2673289c480c8d72c6975891425f5e7479096baf129bb729470cb59aaa5"
        },
        "inherit": [
          "ERC20Burnable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20BurnableMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20BurnableMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20CappedMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20CappedMock.sol:7",
        "version": {
          "withMetadata": "145c5db5dfab5e9b01eed424fd9fd754da5a016aad480b13ab8f57c8f5388aa5",
          "withoutMetadata": "7cf57d3c23faa0481e9336c6087ca425021aac744d8588855cb18fd3c1a8771e",
          "linkedWithoutMetadata": "7cf57d3c23faa0481e9336c6087ca425021aac744d8588855cb18fd3c1a8771e"
        },
        "inherit": [
          "ERC20Capped",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20CappedMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20CappedMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_cap",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ERC20Capped",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Capped.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20DecimalsMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20DecimalsMock.sol:7",
        "version": {
          "withMetadata": "fc49f2bda11bd899aa4ee7901c47a83f4896540d14d69b1c68968c41a6f9ed93",
          "withoutMetadata": "40de248502359f91280c31e4eb4ddac83d20a334f905ba51cbce7f2cb3bfd9d1",
          "linkedWithoutMetadata": "40de248502359f91280c31e4eb4ddac83d20a334f905ba51cbce7f2cb3bfd9d1"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20DecimalsMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20DecimalsMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Mock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20Mock.sol:8",
        "version": {
          "withMetadata": "e89ea0194f8c9cf91eca668765b34e6dcbee4a4aa02a0aa5a7c2e43476c85cd2",
          "withoutMetadata": "63cce3f614b2eaa0fb9a5ad760bb068d4b4119487cc27a8d846fa525af246b9e",
          "linkedWithoutMetadata": "63cce3f614b2eaa0fb9a5ad760bb068d4b4119487cc27a8d846fa525af246b9e"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,uint256)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20PausableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20PausableMock.sol:8",
        "version": {
          "withMetadata": "a61eb09138eb01f79350f4f24737760ff33f4493d374c7c88e1e0b1dffda0b16",
          "withoutMetadata": "a61eb09138eb01f79350f4f24737760ff33f4493d374c7c88e1e0b1dffda0b16",
          "linkedWithoutMetadata": "a61eb09138eb01f79350f4f24737760ff33f4493d374c7c88e1e0b1dffda0b16"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,uint256)",
          "pause()",
          "unpause()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PausableMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20PausableMock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_paused",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20PermitMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20PermitMock.sol:7",
        "version": {
          "withMetadata": "449d8fcbae36abbdf3ae7ddc899b629e07c772dd1265df98875cafc8bbac9536",
          "withoutMetadata": "3c01574f00023cf07856118023176ad0c0fb3b67f03cb4e78df2c99741e9dd80",
          "linkedWithoutMetadata": "3c01574f00023cf07856118023176ad0c0fb3b67f03cb4e78df2c99741e9dd80"
        },
        "inherit": [
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,uint256)",
          "getChainId()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PermitMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20PermitMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_struct(Counter)15499_storage)",
              "contract": "ERC20Permit",
              "src": "contracts\\@openzeppelin\\contracts\\drafts\\ERC20Permit.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)15499_storage)": {
              "label": "mapping(address => struct Counters.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)15499_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20SnapshotMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20SnapshotMock.sol:8",
        "version": {
          "withMetadata": "841d37c82d6518fbb643b73a2f6683096c4b384a9bb6fd63f3dbf9f1105998c8",
          "withoutMetadata": "df9e41a45ec000d2d74670557a7ea7d4931328488763efc2dd119c1013c3c01d",
          "linkedWithoutMetadata": "df9e41a45ec000d2d74670557a7ea7d4931328488763efc2dd119c1013c3c01d"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address,uint256)",
          "snapshot()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20SnapshotMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC20SnapshotMock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_accountBalanceSnapshots",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_struct(Snapshots)11862_storage)",
              "contract": "ERC20Snapshot",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Snapshot.sol:49"
            },
            {
              "label": "_totalSupplySnapshots",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Snapshots)11862_storage",
              "contract": "ERC20Snapshot",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Snapshot.sol:50"
            },
            {
              "label": "_currentSnapshotId",
              "offset": 0,
              "slot": "9",
              "type": "t_struct(Counter)15499_storage",
              "contract": "ERC20Snapshot",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Snapshot.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Snapshots)11862_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)15499_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Snapshots)11862_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721BurnableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721BurnableMock.sol:7",
        "version": {
          "withMetadata": "234a4bd6c44fce048da1409499df675047f3620e8283ab39c112ddaff4f3ef60",
          "withoutMetadata": "1be6855b66f6cf9645585f115a6c34a31bde27d34253d49810e1c1410e240ea7",
          "linkedWithoutMetadata": "1be6855b66f6cf9645585f115a6c34a31bde27d34253d49810e1c1410e240ea7"
        },
        "inherit": [
          "ERC721Burnable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721BurnableMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721BurnableMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721GSNRecipientMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721GSNRecipientMock.sol:13",
        "version": {
          "withMetadata": "387c8a8ec92624a135ff0e53a77ee420020547a52840044469048947ec0e39b2",
          "withoutMetadata": "387c8a8ec92624a135ff0e53a77ee420020547a52840044469048947ec0e39b2",
          "linkedWithoutMetadata": "387c8a8ec92624a135ff0e53a77ee420020547a52840044469048947ec0e39b2"
        },
        "inherit": [
          "GSNRecipientSignature",
          "GSNRecipient",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721GSNRecipientMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721GSNRecipientMock.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            },
            {
              "label": "_relayHub",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "GSNRecipient",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
            },
            {
              "label": "_trustedSigner",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "GSNRecipientSignature",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientSignature.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721Mock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721Mock.sol:11",
        "version": {
          "withMetadata": "8ea36b9db4bf90fd8ddd257104254cd612d35ed608e391053a8c8563bb6a9fc0",
          "withoutMetadata": "c2e016a7e7e0f405ed5003d97f77351fa03f83dabe907ee298fd490ba50987ce",
          "linkedWithoutMetadata": "c2e016a7e7e0f405ed5003d97f77351fa03f83dabe907ee298fd490ba50987ce"
        },
        "inherit": [
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "exists(uint256)",
          "setTokenURI(uint256,string)",
          "setBaseURI(string)",
          "mint(address,uint256)",
          "safeMint(address,uint256)",
          "safeMint(address,uint256,bytes)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721Mock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721Mock.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721PausableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721PausableMock.sol:11",
        "version": {
          "withMetadata": "d9f7318acf986572103ecf1d37616863d7777119058e73f49c26d9047a783cfd",
          "withoutMetadata": "c5dc7071d6a53ad6b1704c19610c1df89dcbe545ec336f44339aae32d676b13c",
          "linkedWithoutMetadata": "c5dc7071d6a53ad6b1704c19610c1df89dcbe545ec336f44339aae32d676b13c"
        },
        "inherit": [
          "ERC721Pausable",
          "Pausable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(uint256)",
          "exists(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721PausableMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721PausableMock.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721ReceiverMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721ReceiverMock.sol:7",
        "version": {
          "withMetadata": "b0660578fccfcab53b5a83b887f06f66271f710c1717cb67c55a6253e36a9260",
          "withoutMetadata": "62d8672c338c40934d6fcae6c959906a04eb517071807f111c31cc2145d839db",
          "linkedWithoutMetadata": "62d8672c338c40934d6fcae6c959906a04eb517071807f111c31cc2145d839db"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(bytes4,bool)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721ReceiverMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721ReceiverMock.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_retval",
              "offset": 0,
              "slot": "0",
              "type": "t_bytes4",
              "contract": "ERC721ReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721ReceiverMock.sol:8"
            },
            {
              "label": "_reverts",
              "offset": 4,
              "slot": "0",
              "type": "t_bool",
              "contract": "ERC721ReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC721ReceiverMock.sol:9"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC777Mock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC777Mock.sol:8",
        "version": {
          "withMetadata": "8a31132440dc492147802d80b5f08346e9aa9bc0e91ebb10162aef8631e6849a",
          "withoutMetadata": "8a31132440dc492147802d80b5f08346e9aa9bc0e91ebb10162aef8631e6849a",
          "linkedWithoutMetadata": "8a31132440dc492147802d80b5f08346e9aa9bc0e91ebb10162aef8631e6849a"
        },
        "inherit": [
          "ERC777",
          "IERC20",
          "IERC777",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,string,string,address[])",
          "mintInternal(address,uint256,bytes,bytes)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC777Mock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC777Mock.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:35"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:37"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:39"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:40"
            },
            {
              "label": "_defaultOperatorsArray",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:54"
            },
            {
              "label": "_defaultOperators",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:57"
            },
            {
              "label": "_operators",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:60"
            },
            {
              "label": "_revokedDefaultOperators",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:61"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC777SenderRecipientMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC777SenderRecipientMock.sol:12",
        "version": {
          "withMetadata": "d62e86f27209a7cb3fb495e40f9a193a7f2c368e5630b602167b7d73501f15a0",
          "withoutMetadata": "ccc60690dff17ddb48038c7f5daeea1a3789ddef9be37089ed9d31344505c1f0",
          "linkedWithoutMetadata": "ccc60690dff17ddb48038c7f5daeea1a3789ddef9be37089ed9d31344505c1f0"
        },
        "inherit": [
          "ERC1820Implementer",
          "IERC1820Implementer",
          "IERC777Recipient",
          "IERC777Sender",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "tokensToSend(address,address,address,uint256,bytes,bytes)",
          "tokensReceived(address,address,address,uint256,bytes,bytes)",
          "senderFor(address)",
          "registerSender(address)",
          "recipientFor(address)",
          "registerRecipient(address)",
          "setShouldRevertSend(bool)",
          "setShouldRevertReceive(bool)",
          "send(address,address,uint256,bytes)",
          "burn(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "_erc1820",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC777SenderRecipientMock.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
              "contract": "ERC1820Implementer",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC1820Implementer.sol:18"
            },
            {
              "label": "_shouldRevertSend",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "ERC777SenderRecipientMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC777SenderRecipientMock.sol:40"
            },
            {
              "label": "_shouldRevertReceive",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "ERC777SenderRecipientMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC777SenderRecipientMock.sol:41"
            },
            {
              "label": "_erc1820",
              "offset": 2,
              "slot": "1",
              "type": "t_contract(IERC1820Registry)3027",
              "contract": "ERC777SenderRecipientMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC777SenderRecipientMock.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC1820Registry)3027": {
              "label": "contract IERC1820Registry",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
              "label": "mapping(bytes32 => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EnumerableMapMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableMapMock.sol:7",
        "version": {
          "withMetadata": "d109505209151fcd130b3fce1024444e9b2af621f9925b650999ea2eddbb0885",
          "withoutMetadata": "3ef121aa6afcdcb26adbb34d243dcf2acf39fd95b3a233df2a13f82908af7d58",
          "linkedWithoutMetadata": "3ef121aa6afcdcb26adbb34d243dcf2acf39fd95b3a233df2a13f82908af7d58"
        },
        "inherit": [],
        "libraries": [
          "EnumerableMap"
        ],
        "methods": [
          "contains(uint256)",
          "set(uint256,address)",
          "remove(uint256)",
          "length()",
          "at(uint256)",
          "tryGet(uint256)",
          "get(uint256)",
          "getWithMessage(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_map",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "EnumerableMapMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableMapMock.sol:12"
            }
          ],
          "types": {
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EnumerableAddressSetMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableSetMock.sol:39",
        "version": {
          "withMetadata": "676b9927746423b5047d846e9506e905652e66eee8f49ea65ff966b22a2927bf",
          "withoutMetadata": "3fea7a066c59c8e090d27a6e5ca485567c6cad238fd77b2822c87ecc9dae8fe6",
          "linkedWithoutMetadata": "3fea7a066c59c8e090d27a6e5ca485567c6cad238fd77b2822c87ecc9dae8fe6"
        },
        "inherit": [],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "contains(address)",
          "add(address)",
          "remove(address)",
          "length()",
          "at(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_set",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(AddressSet)16486_storage",
              "contract": "EnumerableAddressSetMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableSetMock.sol:44"
            }
          ],
          "types": {
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)16486_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EnumerableBytes32SetMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableSetMock.sol:8",
        "version": {
          "withMetadata": "ab57b0bb6c3ce72a72752a844223f493327d1eaa64b7d04efa698be011a1fb00",
          "withoutMetadata": "31019f79c875698f199109c3763c936b92900aae3587945447842d796274ac94",
          "linkedWithoutMetadata": "31019f79c875698f199109c3763c936b92900aae3587945447842d796274ac94"
        },
        "inherit": [],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "contains(bytes32)",
          "add(bytes32)",
          "remove(bytes32)",
          "length()",
          "at(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_set",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Bytes32Set)16401_storage",
              "contract": "EnumerableBytes32SetMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableSetMock.sol:13"
            }
          ],
          "types": {
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Set)16401_storage": {
              "label": "struct EnumerableSet.Bytes32Set",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "EnumerableUintSetMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableSetMock.sol:70",
        "version": {
          "withMetadata": "954c218a9856d6a6dc88b4225d609199286512e98ea20c50fea89d5c44e1adb0",
          "withoutMetadata": "d9ea9b2b02cedffaf33c3a6b0e190ce09645cc950d83805963668e5a3eb7193c",
          "linkedWithoutMetadata": "d9ea9b2b02cedffaf33c3a6b0e190ce09645cc950d83805963668e5a3eb7193c"
        },
        "inherit": [],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "contains(uint256)",
          "add(uint256)",
          "remove(uint256)",
          "length()",
          "at(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_set",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(UintSet)16607_storage",
              "contract": "EnumerableUintSetMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\EnumerableSetMock.sol:75"
            }
          ],
          "types": {
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "GSNRecipientERC20FeeMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\GSNRecipientERC20FeeMock.sol:8",
        "version": {
          "withMetadata": "a05e0b6908f56cb5fc30030f8c0aa4ec4ca380b8ff209f4b1df3cb9e96bb82ce",
          "withoutMetadata": "ffff231e9feade3caa7e49edb05c63ca6f950324087794b86ccd4a14365e2fbc",
          "linkedWithoutMetadata": "ffff231e9feade3caa7e49edb05c63ca6f950324087794b86ccd4a14365e2fbc"
        },
        "inherit": [
          "GSNRecipientERC20Fee",
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "mockFunction()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientERC20FeeMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\GSNRecipientERC20FeeMock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_relayHub",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GSNRecipient",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
            },
            {
              "label": "_token",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(__unstable__ERC20Owned)705",
              "contract": "GSNRecipientERC20Fee",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientERC20Fee.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(__unstable__ERC20Owned)705": {
              "label": "contract __unstable__ERC20Owned",
              "numberOfBytes": "20"
            },
            "t_contract$___unstable__ERC20Owned)705": {
              "label": "contract __unstable__ERC20Owned"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "GSNRecipientMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\GSNRecipientMock.sol:9",
        "version": {
          "withMetadata": "0aa19f2b5ade420ac63b23c52fbb21d6db883cc75942e7fc5ad6e80cdc7a935e",
          "withoutMetadata": "c7f572c8cecad769fb2b74f5af18568d469219053440778acda7fba09beb5a90",
          "linkedWithoutMetadata": "c7f572c8cecad769fb2b74f5af18568d469219053440778acda7fba09beb5a90"
        },
        "inherit": [
          "GSNRecipient",
          "ContextMock",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "withdrawDeposits(uint256,address payable)",
          "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)",
          "upgradeRelayHub(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_relayHub",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GSNRecipient",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "GSNRecipientSignatureMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\GSNRecipientSignatureMock.sol:8",
        "version": {
          "withMetadata": "7b7aab8874de89f1f61991515f18c8a58e2cb8a370ddfa1df4ddd7240d7348c1",
          "withoutMetadata": "7b7aab8874de89f1f61991515f18c8a58e2cb8a370ddfa1df4ddd7240d7348c1",
          "linkedWithoutMetadata": "7b7aab8874de89f1f61991515f18c8a58e2cb8a370ddfa1df4ddd7240d7348c1"
        },
        "inherit": [
          "GSNRecipientSignature",
          "GSNRecipient",
          "Context",
          "IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "mockFunction()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GSNRecipientSignatureMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\GSNRecipientSignatureMock.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_relayHub",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GSNRecipient",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipient.sol:22"
            },
            {
              "label": "_trustedSigner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "GSNRecipientSignature",
              "src": "contracts\\@openzeppelin\\contracts\\GSN\\GSNRecipientSignature.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "InitializableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\InitializableMock.sol:11",
        "version": {
          "withMetadata": "b8298f7333886052df76f9430287f8518b32c7e4c0b6782dc1620afcdba86d05",
          "withoutMetadata": "7de0aae41e56b00fe0cb125396904d9f3dbebcd7abc6a142c2cd48ea2b33bfb7",
          "linkedWithoutMetadata": "7de0aae41e56b00fe0cb125396904d9f3dbebcd7abc6a142c2cd48ea2b33bfb7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "initializeNested()",
          "initializeWithX(uint256)",
          "nonInitializable(uint256)",
          "fail()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "initializerRan",
              "offset": 2,
              "slot": "0",
              "type": "t_bool",
              "contract": "InitializableMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\InitializableMock.sol:13"
            },
            {
              "label": "x",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "InitializableMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\InitializableMock.sol:14"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MathMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\MathMock.sol:7",
        "version": {
          "withMetadata": "3cdd6ac90824f424eb996ecb1db2c8fd8ac18d35986c7bdd047b5651158e0680",
          "withoutMetadata": "fbf3567fb0f5ea1267ab0b9ad9289b99d1d3d49cc261186c878f23e5a8c36ac6",
          "linkedWithoutMetadata": "fbf3567fb0f5ea1267ab0b9ad9289b99d1d3d49cc261186c878f23e5a8c36ac6"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [
          "max(uint256,uint256)",
          "min(uint256,uint256)",
          "average(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SampleChild": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:68",
        "version": {
          "withMetadata": "632cd39f51c4b07fefee77ce85764dcd95b9e927ef91fce976ecdd4ae98eec0d",
          "withoutMetadata": "32cbe7559ce2039bd6fb3429708060db96c00b38280fb6383acd6c5ab1ba1a8b",
          "linkedWithoutMetadata": "32cbe7559ce2039bd6fb3429708060db96c00b38280fb6383acd6c5ab1ba1a8b"
        },
        "inherit": [
          "SampleFather",
          "SampleGramps",
          "SampleMother",
          "SampleHuman",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256,string,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "isHuman",
              "offset": 2,
              "slot": "0",
              "type": "t_bool",
              "contract": "SampleHuman",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:22"
            },
            {
              "label": "mother",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SampleMother",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:33"
            },
            {
              "label": "gramps",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "SampleGramps",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:45"
            },
            {
              "label": "father",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "SampleFather",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:57"
            },
            {
              "label": "child",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "SampleChild",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:69"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SampleFather": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:56",
        "version": {
          "withMetadata": "c849e656626917ba84c9fbaf4b030615edfc6ec4a4707528588952b3a3e16177",
          "withoutMetadata": "9343971b59f99122e853f29bf8e11c9c93e21d6d4d9b7084951bd20a349feb68",
          "linkedWithoutMetadata": "9343971b59f99122e853f29bf8e11c9c93e21d6d4d9b7084951bd20a349feb68"
        },
        "inherit": [
          "SampleGramps",
          "SampleHuman",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "isHuman",
              "offset": 2,
              "slot": "0",
              "type": "t_bool",
              "contract": "SampleHuman",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:22"
            },
            {
              "label": "gramps",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "SampleGramps",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:45"
            },
            {
              "label": "father",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "SampleFather",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:57"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SampleGramps": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:44",
        "version": {
          "withMetadata": "9ce8029870889ebd7f0548bed555ddb1dcde0d12210d4898cdacc9e7e5477f52",
          "withoutMetadata": "259ca78a835e6076685cbd768e63302cf3e0e2a0637481ddacb7c298c9ad484d",
          "linkedWithoutMetadata": "259ca78a835e6076685cbd768e63302cf3e0e2a0637481ddacb7c298c9ad484d"
        },
        "inherit": [
          "SampleHuman",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "isHuman",
              "offset": 2,
              "slot": "0",
              "type": "t_bool",
              "contract": "SampleHuman",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:22"
            },
            {
              "label": "gramps",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "SampleGramps",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:45"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SampleHuman": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:21",
        "version": {
          "withMetadata": "02be2cfe1ac6292932396635227833f63d395cfb6ab6c2672231cddbadfc2d00",
          "withoutMetadata": "c654602f06c94fab9ef6f4cc6ac4bac30ff5828c242cfc20514bb6e76be6a433",
          "linkedWithoutMetadata": "c654602f06c94fab9ef6f4cc6ac4bac30ff5828c242cfc20514bb6e76be6a433"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "isHuman",
              "offset": 2,
              "slot": "0",
              "type": "t_bool",
              "contract": "SampleHuman",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:22"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SampleMother": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:32",
        "version": {
          "withMetadata": "22b18ec599ce9a28d6303fbd8589295cfadfb881735a8b10b4dccfddde6adf6c",
          "withoutMetadata": "0ea59b3a09d6e8cf8fdc59652c2623205b0885b4c62d5f688c1e6def75b9a5d2",
          "linkedWithoutMetadata": "0ea59b3a09d6e8cf8fdc59652c2623205b0885b4c62d5f688c1e6def75b9a5d2"
        },
        "inherit": [
          "SampleHuman",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "isHuman",
              "offset": 2,
              "slot": "0",
              "type": "t_bool",
              "contract": "SampleHuman",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:22"
            },
            {
              "label": "mother",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "SampleMother",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\MultipleInheritanceInitializableMocks.sol:33"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "OwnableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\OwnableMock.sol:7",
        "version": {
          "withMetadata": "ec7a012288c113f4345c03733c76649ee74023b182d40df6bbda50feaf7285f5",
          "withoutMetadata": "1a7574f3db1e1a89ffdec4897e05ec6e80da543a9c8eed0786e9650bdbc48f13",
          "linkedWithoutMetadata": "1a7574f3db1e1a89ffdec4897e05ec6e80da543a9c8eed0786e9650bdbc48f13"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PausableMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\PausableMock.sol:7",
        "version": {
          "withMetadata": "33faf66c6420191ac9b91a35499596aff3bc1520fa22cadf8e6ec872aba916ca",
          "withoutMetadata": "7b0e931bd674591d523a44e7ddf42275564bf12e1ab23d11e5835d1f22102f5b",
          "linkedWithoutMetadata": "7b0e931bd674591d523a44e7ddf42275564bf12e1ab23d11e5835d1f22102f5b"
        },
        "inherit": [
          "Pausable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "normalProcess()",
          "drasticMeasure()",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PausableMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\PausableMock.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            },
            {
              "label": "drasticMeasureTaken",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "PausableMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\PausableMock.sol:8"
            },
            {
              "label": "count",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "PausableMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\PausableMock.sol:9"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PullPaymentMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\PullPaymentMock.sol:8",
        "version": {
          "withMetadata": "7422d20691930a1e7bcf257ee2bd1ad1ba61e7f4433f3be3ffb12a38eaa671a6",
          "withoutMetadata": "308c94a903a89a0826a51a1c9094c90972f8ac8222015dc7dabe5667a4c3c51c",
          "linkedWithoutMetadata": "308c94a903a89a0826a51a1c9094c90972f8ac8222015dc7dabe5667a4c3c51c"
        },
        "inherit": [
          "PullPayment"
        ],
        "libraries": [],
        "methods": [
          "()",
          "callTransfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_escrow",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(Escrow)8217",
              "contract": "PullPayment",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\PullPayment.sol:26"
            }
          ],
          "types": {
            "t_contract(Escrow)8217": {
              "label": "contract Escrow",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ReentrancyAttack": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ReentrancyAttack.sol:6",
        "version": {
          "withMetadata": "c3e4f815c977238262d3e861672b0ddd0e8680f837acfb7217a0edb5aeb9e65b",
          "withoutMetadata": "76a7b112e45f8099ae28b106bbc0cd5479f731bed98897e238b5a30e0ab21838",
          "linkedWithoutMetadata": "76a7b112e45f8099ae28b106bbc0cd5479f731bed98897e238b5a30e0ab21838"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "callSender(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ReentrancyMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ReentrancyMock.sol:8",
        "version": {
          "withMetadata": "4e468fc39317923ced2434e9b4335f839f6834a5134ad7ce05852ee06a0b1437",
          "withoutMetadata": "d338592c8d80225b6271fb0d8a5dfae49050321f3cc05d16c056f60a468c2995",
          "linkedWithoutMetadata": "d338592c8d80225b6271fb0d8a5dfae49050321f3cc05d16c056f60a468c2995"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "()",
          "callback()",
          "countLocalRecursive(uint256)",
          "countThisRecursive(uint256)",
          "countAndCall(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyMock",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\ReentrancyMock.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:36"
            },
            {
              "label": "counter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\ReentrancyMock.sol:9"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Implementation1": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:7",
        "version": {
          "withMetadata": "bdf071590d80170815a04892e138aa1bbc9a7e7176f5560ff740351f34af089d",
          "withoutMetadata": "7081c3c5e5dbe502409318a623de666955b5a57e44cc1527360e39baa11da5cd",
          "linkedWithoutMetadata": "7081c3c5e5dbe502409318a623de666955b5a57e44cc1527360e39baa11da5cd"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setValue(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "_value",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Implementation1",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:8"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Implementation2": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:18",
        "version": {
          "withMetadata": "1933af2ef301bf84f2d7cd6c1cb84e2d621c7a8767a84f0bed0f934a6ca98282",
          "withoutMetadata": "c86fa76877df4e21212e332a4fa33a5059d10c1b5d571f5c1fe45d827f534acb",
          "linkedWithoutMetadata": "c86fa76877df4e21212e332a4fa33a5059d10c1b5d571f5c1fe45d827f534acb"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setValue(uint256)",
          "getValue()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "_value",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Implementation2",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:19"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Implementation3": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:33",
        "version": {
          "withMetadata": "8cf7bc96a067891d5cc4597e5736e6cee929ac98771b5b781e81c2d9637dd756",
          "withoutMetadata": "612960a29c5da3322314fae551b961d1e822213096fb7b1dbbd8f1324960e745",
          "linkedWithoutMetadata": "612960a29c5da3322314fae551b961d1e822213096fb7b1dbbd8f1324960e745"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setValue(uint256)",
          "getValue(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "_value",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Implementation3",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:34"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Implementation4": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:48",
        "version": {
          "withMetadata": "005f23c4d943d558239253d161e321f3e1271d9ec19437562540212324086d13",
          "withoutMetadata": "90e0c804006957209f537a8183043a1731c7a2e469534d0b0976fcf4b5ed0c92",
          "linkedWithoutMetadata": "90e0c804006957209f537a8183043a1731c7a2e469534d0b0976fcf4b5ed0c92"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setValue(uint256)",
          "getValue()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "_value",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "Implementation4",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\RegressionImplementation.sol:49"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20NoReturnMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:68",
        "version": {
          "withMetadata": "5ff4eee9171e12c5251659e0bef73c46d9458b5b1e83c2e09f371b632d7b13a6",
          "withoutMetadata": "3a66b89ef1b9830020ec34666c7e159fd0a29b021dac6f9781a5cd8fe49cb50d",
          "linkedWithoutMetadata": "3a66b89ef1b9830020ec34666c7e159fd0a29b021dac6f9781a5cd8fe49cb50d"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setAllowance(uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20NoReturnMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:69"
            },
            {
              "label": "_dummy",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC20NoReturnMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:73"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20ReturnFalseMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:9",
        "version": {
          "withMetadata": "438fa91ea4f1010e188d574d7bcfac18e2c7a3110171934583e50a7391fdce54",
          "withoutMetadata": "ce03d41e339371c9fba5601c5974559fe013098edfa6a3077f2f13787c33bfa8",
          "linkedWithoutMetadata": "ce03d41e339371c9fba5601c5974559fe013098edfa6a3077f2f13787c33bfa8"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_allowance",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC20ReturnFalseMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:10"
            },
            {
              "label": "_dummy",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC20ReturnFalseMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:14"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20ReturnTrueMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:37",
        "version": {
          "withMetadata": "eb6f2f1126605b38a5a66578df10445838905b72000c3c657ac7578d7f9e1bc7",
          "withoutMetadata": "f3d3ade591af398e8bf373aa1208b2343356f6d51bf5ddf2d81321c904935915",
          "linkedWithoutMetadata": "f3d3ade591af398e8bf373aa1208b2343356f6d51bf5ddf2d81321c904935915"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setAllowance(uint256)",
          "allowance(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20ReturnTrueMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:38"
            },
            {
              "label": "_dummy",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC20ReturnTrueMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeERC20Wrapper": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:96",
        "version": {
          "withMetadata": "f621e3ead6461e1d07a7aa7a40baa8ee92105458ea701eaf4d3171f924619f74",
          "withoutMetadata": "c0c203cc6fe3923e72cfba57145289cf9a5f40837f237adc8492aebd52469381",
          "linkedWithoutMetadata": "c0c203cc6fe3923e72cfba57145289cf9a5f40837f237adc8492aebd52469381"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address)",
          "transfer()",
          "transferFrom()",
          "approve(uint256)",
          "increaseAllowance(uint256)",
          "decreaseAllowance(uint256)",
          "setAllowance(uint256)",
          "allowance()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SafeERC20Wrapper",
            "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:101"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)12232",
              "contract": "SafeERC20Wrapper",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeERC20Helper.sol:99"
            }
          ],
          "types": {
            "t_contract(IERC20)12232": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMathMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeMathMock.sol:7",
        "version": {
          "withMetadata": "c67aa54caa6827449ad4cd9cc1357f8293a997faff8d2ef3d3f25a6bbbe634d3",
          "withoutMetadata": "0fe889275c1b2f507d74170f1c83ca82a22d7b20c1114aae24bc0f0d9b67c407",
          "linkedWithoutMetadata": "0fe889275c1b2f507d74170f1c83ca82a22d7b20c1114aae24bc0f0d9b67c407"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "tryAdd(uint256,uint256)",
          "trySub(uint256,uint256)",
          "tryMul(uint256,uint256)",
          "tryDiv(uint256,uint256)",
          "tryMod(uint256,uint256)",
          "doAdd(uint256,uint256)",
          "doSub(uint256,uint256)",
          "doMul(uint256,uint256)",
          "doDiv(uint256,uint256)",
          "doMod(uint256,uint256)",
          "subWithMessage(uint256,uint256,string)",
          "divWithMessage(uint256,uint256,string)",
          "modWithMessage(uint256,uint256,string)",
          "addMemoryCheck()",
          "subMemoryCheck()",
          "mulMemoryCheck()",
          "divMemoryCheck()",
          "modMemoryCheck()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MigratableMockV1": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:11",
        "version": {
          "withMetadata": "bb2243c89be31a5c686c37a192de9a71d982d00596bf6e32ff01a303ce6c9215",
          "withoutMetadata": "5cc7095781f80edbd7dd1ce3ca23c8c3836df7300950141707ad3d3310a3ee07",
          "linkedWithoutMetadata": "5cc7095781f80edbd7dd1ce3ca23c8c3836df7300950141707ad3d3310a3ee07"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "x",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "MigratableMockV1",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:12"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigratableMockV2": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:23",
        "version": {
          "withMetadata": "78a75ed426f6fe84059190450715f47b40cca55f717f50f02cc4136ce0ef9fdd",
          "withoutMetadata": "93c7a86390742d13feb1e9f97fa5c1b2ebe322a6d644da091935fdbd9b52467a",
          "linkedWithoutMetadata": "93c7a86390742d13feb1e9f97fa5c1b2ebe322a6d644da091935fdbd9b52467a"
        },
        "inherit": [
          "MigratableMockV1",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "migrate(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "x",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "MigratableMockV1",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:12"
            },
            {
              "label": "_migratedV2",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "MigratableMockV2",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:24"
            },
            {
              "label": "y",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "MigratableMockV2",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:25"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "MigratableMockV3": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:39",
        "version": {
          "withMetadata": "4316e42558fbe8c4a7c1619c9d0b30c0ed6c5035be39eea79e39e8c457026510",
          "withoutMetadata": "39cbd5b287c6895c2ccc8fa3b3ea1e1e81f8320d742ce202ba26adf121fb2ee1",
          "linkedWithoutMetadata": "39cbd5b287c6895c2ccc8fa3b3ea1e1e81f8320d742ce202ba26adf121fb2ee1"
        },
        "inherit": [
          "MigratableMockV2",
          "MigratableMockV1",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "migrate()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            },
            {
              "label": "x",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "MigratableMockV1",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:12"
            },
            {
              "label": "_migratedV2",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "MigratableMockV2",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:24"
            },
            {
              "label": "y",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "MigratableMockV2",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:25"
            },
            {
              "label": "_migratedV3",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "MigratableMockV3",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\SingleInheritanceInitializableMocks.sol:40"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "StringsMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\StringsMock.sol:7",
        "version": {
          "withMetadata": "fa3f591addad90aac19d6d94b6f1ca8b8b20d5adf5fa07e0f676269025aef14f",
          "withoutMetadata": "c6b0509912bb21ec41a33b9d1e618eab4f3118ee685c70a33e12c9823c4151e5",
          "linkedWithoutMetadata": "c6b0509912bb21ec41a33b9d1e618eab4f3118ee685c70a33e12c9823c4151e5"
        },
        "inherit": [],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "fromUint256(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "PaymentSplitter": {
        "src": "contracts\\@openzeppelin\\contracts\\payment\\PaymentSplitter.sol:22",
        "version": {
          "withMetadata": "8c3322fd3963133ef3772ceab189a2efc9368c15175f556c4a913dbde67e10b6",
          "withoutMetadata": "8c3322fd3963133ef3772ceab189a2efc9368c15175f556c4a913dbde67e10b6",
          "linkedWithoutMetadata": "8c3322fd3963133ef3772ceab189a2efc9368c15175f556c4a913dbde67e10b6"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(address[],uint256[])",
          "()",
          "totalShares()",
          "totalReleased()",
          "shares(address)",
          "released(address)",
          "payee(uint256)",
          "release(address payable)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PaymentSplitter",
            "src": "contracts\\@openzeppelin\\contracts\\payment\\PaymentSplitter.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_totalShares",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "PaymentSplitter",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\PaymentSplitter.sol:29"
            },
            {
              "label": "_totalReleased",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "PaymentSplitter",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\PaymentSplitter.sol:30"
            },
            {
              "label": "_shares",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\PaymentSplitter.sol:32"
            },
            {
              "label": "_released",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\PaymentSplitter.sol:33"
            },
            {
              "label": "_payees",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PaymentSplitter",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\PaymentSplitter.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "PullPayment": {
        "src": "contracts\\@openzeppelin\\contracts\\payment\\PullPayment.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdrawPayments(address payable)",
          "payments(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PullPayment",
            "src": "contracts\\@openzeppelin\\contracts\\payment\\PullPayment.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_escrow",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(Escrow)8217",
              "contract": "PullPayment",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\PullPayment.sol:26"
            }
          ],
          "types": {
            "t_contract(Escrow)8217": {
              "label": "contract Escrow",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ConditionalEscrow": {
        "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\ConditionalEscrow.sol:12",
        "inherit": [
          "Escrow",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "withdrawalAllowed(address)",
          "withdraw(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\Escrow.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Escrow": {
        "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\Escrow.sol:22",
        "version": {
          "withMetadata": "9ba9e212ca9e370b05b7cff893b214ca94ebbf57ac4a6e2bd7a871ec91192eba",
          "withoutMetadata": "d3b139e8291fb5df84539b408ea9a59fba7a47c3f6e6b34f9547d572d0bf0aa9",
          "linkedWithoutMetadata": "d3b139e8291fb5df84539b408ea9a59fba7a47c3f6e6b34f9547d572d0bf0aa9"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "depositsOf(address)",
          "deposit(address)",
          "withdraw(address payable)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\Escrow.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "RefundEscrow": {
        "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\RefundEscrow.sol:17",
        "version": {
          "withMetadata": "29bd145cf189fe6cee68b7e40dd36e473d72b36c1874359c2fa27df1c4ae7377",
          "withoutMetadata": "29bd145cf189fe6cee68b7e40dd36e473d72b36c1874359c2fa27df1c4ae7377",
          "linkedWithoutMetadata": "29bd145cf189fe6cee68b7e40dd36e473d72b36c1874359c2fa27df1c4ae7377"
        },
        "inherit": [
          "ConditionalEscrow",
          "Escrow",
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address payable)",
          "state()",
          "beneficiary()",
          "deposit(address)",
          "close()",
          "enableRefunds()",
          "beneficiaryWithdraw()",
          "withdrawalAllowed(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RefundEscrow",
            "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\RefundEscrow.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            },
            {
              "label": "_deposits",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Escrow",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\Escrow.sol:29"
            },
            {
              "label": "_state",
              "offset": 0,
              "slot": "2",
              "type": "t_enum(State)8227",
              "contract": "RefundEscrow",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\RefundEscrow.sol:23"
            },
            {
              "label": "_beneficiary",
              "offset": 1,
              "slot": "2",
              "type": "t_address_payable",
              "contract": "RefundEscrow",
              "src": "contracts\\@openzeppelin\\contracts\\payment\\escrow\\RefundEscrow.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_enum(State)8227": {
              "label": "enum RefundEscrow.State",
              "members": [
                "Active",
                "Refunding",
                "Closed"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155PresetMinterPauser": {
        "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC1155PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "9282dbbd4b60af2363418fbcb0d46d7cafe8a3bfd006fc558396838e91bdd652",
          "withoutMetadata": "4c34a02689b6aabd9da15703756ecc5b6a321ed30f447475fc201bbaff60851c",
          "linkedWithoutMetadata": "4c34a02689b6aabd9da15703756ecc5b6a321ed30f447475fc201bbaff60851c"
        },
        "inherit": [
          "ERC1155Pausable",
          "Pausable",
          "ERC1155Burnable",
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "AccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string)",
          "mint(address,uint256,uint256,bytes)",
          "mintBatch(address,uint256[],uint256[],bytes)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155PresetMinterPauser",
            "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC1155PresetMinterPauser.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)",
              "contract": "AccessControl",
              "src": "contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol:53"
            },
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:26"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:29"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:32"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)16486_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)1187_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)16486_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20PresetFixedSupply": {
        "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC20PresetFixedSupply.sol:18",
        "version": {
          "withMetadata": "37cc49009ad1b358e8cf1495a2b123600a9354f769886e5afd434c4af9a0073d",
          "withoutMetadata": "c5af974b3e4da8a9885463efcff95f7ba972aa35971773407def001563a8fb62",
          "linkedWithoutMetadata": "c5af974b3e4da8a9885463efcff95f7ba972aa35971773407def001563a8fb62"
        },
        "inherit": [
          "ERC20Burnable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetFixedSupply",
            "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC20PresetFixedSupply.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC20PresetMinterPauser.sol:25",
        "version": {
          "withMetadata": "f70f8430efe367745aea45b1247aecaf66d59018fae37492dc7d6f5b323573ce",
          "withoutMetadata": "a461532f7bf184a2828fdbaaa9ffe87cf7f4d853fde0855a1d5b0dcfba517268",
          "linkedWithoutMetadata": "a461532f7bf184a2828fdbaaa9ffe87cf7f4d853fde0855a1d5b0dcfba517268"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20",
          "AccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC20PresetMinterPauser.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)",
              "contract": "AccessControl",
              "src": "contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol:53"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "6",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_paused",
              "offset": 1,
              "slot": "6",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)16486_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)1187_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)16486_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721PresetMinterPauserAutoId": {
        "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC721PresetMinterPauserAutoId.sol:27",
        "version": {
          "withMetadata": "0759f76fc7e77eb0c3890638041691b518f310f6431549f9010e47b2d6b91fcf",
          "withoutMetadata": "c4cd09a8b10fb67a621ab6445e02b83da796fd18d5e9eedc8eb44e3b982277c2",
          "linkedWithoutMetadata": "c4cd09a8b10fb67a621ab6445e02b83da796fd18d5e9eedc8eb44e3b982277c2"
        },
        "inherit": [
          "ERC721Pausable",
          "Pausable",
          "ERC721Burnable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "AccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "(string,string,string)",
          "mint(address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721PresetMinterPauserAutoId",
            "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC721PresetMinterPauserAutoId.sol:42"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)",
              "contract": "AccessControl",
              "src": "contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol:53"
            },
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "3",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "8",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "10",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            },
            {
              "label": "_tokenIdTracker",
              "offset": 0,
              "slot": "12",
              "type": "t_struct(Counter)15499_storage",
              "contract": "ERC721PresetMinterPauserAutoId",
              "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC721PresetMinterPauserAutoId.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)1187_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)16486_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)15499_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)1187_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_struct(AddressSet)16486_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC777PresetFixedSupply": {
        "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC777PresetFixedSupply.sol:14",
        "version": {
          "withMetadata": "939c7be43ddd61f55d84a50663d2a106e4316842459c00f9aac87e4be7309142",
          "withoutMetadata": "939c7be43ddd61f55d84a50663d2a106e4316842459c00f9aac87e4be7309142",
          "linkedWithoutMetadata": "939c7be43ddd61f55d84a50663d2a106e4316842459c00f9aac87e4be7309142"
        },
        "inherit": [
          "ERC777",
          "IERC20",
          "IERC777",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address[],uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC777PresetFixedSupply",
            "src": "contracts\\@openzeppelin\\contracts\\presets\\ERC777PresetFixedSupply.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:35"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:37"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:39"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:40"
            },
            {
              "label": "_defaultOperatorsArray",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:54"
            },
            {
              "label": "_defaultOperators",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:57"
            },
            {
              "label": "_operators",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:60"
            },
            {
              "label": "_revokedDefaultOperators",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:61"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "BeaconProxy": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\BeaconProxy.sol:17",
        "version": {
          "withMetadata": "fbd4b53b271a4946e0cefb96d01ca9202bd4b32020021896842b0a201c1bc10f",
          "withoutMetadata": "fbd4b53b271a4946e0cefb96d01ca9202bd4b32020021896842b0a201c1bc10f",
          "linkedWithoutMetadata": "fbd4b53b271a4946e0cefb96d01ca9202bd4b32020021896842b0a201c1bc10f"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "contracts\\@openzeppelin\\contracts\\proxy\\BeaconProxy.sol:35"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Clones": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\Clones.sol:18",
        "version": {
          "withMetadata": "ea6897ec13bcd8ad6a73c627b2c3fad2acdbab8dbc93ced515f99fba8f7c0cbe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBeacon": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\IBeacon.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Initializable": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:25"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Proxy": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ProxyAdmin": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\ProxyAdmin.sol:12",
        "version": {
          "withMetadata": "39057ad62855aaa766a9963ace05a4d3253a9ab12c1b05c82de7feb5896e49aa",
          "withoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72",
          "linkedWithoutMetadata": "ed1aee2f0dae262982d214e10fdee51b42af8a6317158eebffb1d3b96186cd72"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "getProxyImplementation(address)",
          "getProxyAdmin(address)",
          "changeProxyAdmin(address,address)",
          "upgrade(address,address)",
          "upgradeAndCall(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "a3315bde32d238b270311738d8eddc0dddf8d0756453085240253e2e9ce3bb98",
          "withoutMetadata": "a3315bde32d238b270311738d8eddc0dddf8d0756453085240253e2e9ce3bb98",
          "linkedWithoutMetadata": "a3315bde32d238b270311738d8eddc0dddf8d0756453085240253e2e9ce3bb98"
        },
        "inherit": [
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "contracts\\@openzeppelin\\contracts\\proxy\\TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "UpgradeableBeacon": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\UpgradeableBeacon.sol:15",
        "version": {
          "withMetadata": "b56483de44cee77d7afd96afd5d348374bee39c17e72a26ca447b898f43bfb45",
          "withoutMetadata": "b56483de44cee77d7afd96afd5d348374bee39c17e72a26ca447b898f43bfb45",
          "linkedWithoutMetadata": "b56483de44cee77d7afd96afd5d348374bee39c17e72a26ca447b898f43bfb45"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IBeacon"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "implementation()",
          "upgradeTo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableBeacon",
            "src": "contracts\\@openzeppelin\\contracts\\proxy\\UpgradeableBeacon.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\@openzeppelin\\contracts\\access\\Ownable.sol:19"
            },
            {
              "label": "_implementation",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "UpgradeableBeacon",
              "src": "contracts\\@openzeppelin\\contracts\\proxy\\UpgradeableBeacon.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "UpgradeableProxy": {
        "src": "contracts\\@openzeppelin\\contracts\\proxy\\UpgradeableProxy.sol:17",
        "version": {
          "withMetadata": "7b7ece4b4428be888ac2cd55140f4ba7e40af5847193161fd866657b966cd992",
          "withoutMetadata": "7b7ece4b4428be888ac2cd55140f4ba7e40af5847193161fd866657b966cd992",
          "linkedWithoutMetadata": "7b7ece4b4428be888ac2cd55140f4ba7e40af5847193161fd866657b966cd992"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableProxy",
            "src": "contracts\\@openzeppelin\\contracts\\proxy\\UpgradeableProxy.sol:24"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC1155": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:21",
        "version": {
          "withMetadata": "b55ea18d0cab3ce2a7e46c19a7a7a046155318175b71925ed9511d44608812d3",
          "withoutMetadata": "7eacb5600acf33ec5623d51a27fdce3a7df0fd6ef90183231710542df2fa0df7",
          "linkedWithoutMetadata": "7eacb5600acf33ec5623d51a27fdce3a7df0fd6ef90183231710542df2fa0df7"
        },
        "inherit": [
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string)",
          "uri(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155",
            "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:26"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:29"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155Burnable": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155Burnable.sol:13",
        "inherit": [
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(address,uint256,uint256)",
          "burnBatch(address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:26"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:29"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155Holder": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155Holder.sol:10",
        "version": {
          "withMetadata": "e229ca86c82182810b1a1578b8b85a647c0aaeebbcc21e030d3c4239e0be28a0",
          "withoutMetadata": "62ad26db96cd21883f13a73c28056bf39ba031a2bd834cdd879c33f659b62865",
          "linkedWithoutMetadata": "62ad26db96cd21883f13a73c28056bf39ba031a2bd834cdd879c33f659b62865"
        },
        "inherit": [
          "ERC1155Receiver",
          "IERC1155Receiver",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155Pausable": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155Pausable.sol:17",
        "inherit": [
          "Pausable",
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:26"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:29"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:32"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC1155Receiver": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155Receiver.sol:11",
        "inherit": [
          "IERC1155Receiver",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155Receiver",
            "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\ERC1155Receiver.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC1155": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC1155MetadataURI": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\IERC1155MetadataURI.sol:13",
        "inherit": [
          "IERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC1155Receiver": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC1155\\IERC1155Receiver.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC20": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:33",
        "version": {
          "withMetadata": "d86b2bc47b44b7c2a19b24124f76403dfbe60729e2774c1a3c60efcb54607863",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Burnable": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Capped": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Capped.sol:10",
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "cap()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Capped",
            "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Capped.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_cap",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ERC20Capped",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Capped.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Pausable": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_paused",
              "offset": 1,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20Snapshot": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Snapshot.sol:34",
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "ERC20",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:44"
            },
            {
              "label": "_accountBalanceSnapshots",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_struct(Snapshots)11862_storage)",
              "contract": "ERC20Snapshot",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Snapshot.sol:49"
            },
            {
              "label": "_totalSupplySnapshots",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Snapshots)11862_storage",
              "contract": "ERC20Snapshot",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Snapshot.sol:50"
            },
            {
              "label": "_currentSnapshotId",
              "offset": 0,
              "slot": "9",
              "type": "t_struct(Counter)15499_storage",
              "contract": "ERC20Snapshot",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\ERC20Snapshot.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Snapshots)11862_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)15499_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Snapshots)11862_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeERC20": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol:18",
        "version": {
          "withMetadata": "12a818c452ae755736ceddf0c956c626d33e3ebc64c61b69a815b2c58b26699d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "TokenTimelock": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\TokenTimelock.sol:14",
        "version": {
          "withMetadata": "9502755be1912cb136f1083ecbd388206a67ec720a2cc874b2c5cd8680ab61ac",
          "withoutMetadata": "9502755be1912cb136f1083ecbd388206a67ec720a2cc874b2c5cd8680ab61ac",
          "linkedWithoutMetadata": "9502755be1912cb136f1083ecbd388206a67ec720a2cc874b2c5cd8680ab61ac"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [
          "(address,address,uint256)",
          "token()",
          "beneficiary()",
          "releaseTime()",
          "release()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TokenTimelock",
            "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\TokenTimelock.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_token",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)12232",
              "contract": "TokenTimelock",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\TokenTimelock.sol:18"
            },
            {
              "label": "_beneficiary",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "TokenTimelock",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\TokenTimelock.sol:21"
            },
            {
              "label": "_releaseTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TokenTimelock",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC20\\TokenTimelock.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)12232": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:21",
        "version": {
          "withMetadata": "38ad706c545561e83e0c9794d1ab5fe5ccd3467a6be4966a285cde0fc858a4e3",
          "withoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033",
          "linkedWithoutMetadata": "3b9603e3ba8de701bdbd85fd5e78921e81db89f785601570458c066456264033"
        },
        "inherit": [
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address",
          "EnumerableSet",
          "EnumerableMap",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "baseURI()",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:93"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721Burnable": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC721Holder": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721Holder.sol:13",
        "version": {
          "withMetadata": "b1f05f4218126b8c2a8017fbe67507d65c70700ac341330a169d0a40680d3901",
          "withoutMetadata": "137df6a6efa04ae24dbffb1da379b99cbf88bb7fa99ca9af2db6ad24197185b0",
          "linkedWithoutMetadata": "137df6a6efa04ae24dbffb1da379b99cbf88bb7fa99ca9af2db6ad24197185b0"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC721Pausable": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC721",
          "IERC721Enumerable",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_supportedInterfaces",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes4,t_bool)",
              "contract": "ERC165",
              "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165.sol:22"
            },
            {
              "label": "_holderTokens",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_struct(UintSet)16607_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenOwners",
              "offset": 0,
              "slot": "2",
              "type": "t_struct(UintToAddressMap)15984_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:42"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:48"
            },
            {
              "label": "_tokenURIs",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:51"
            },
            {
              "label": "_baseURI",
              "offset": 0,
              "slot": "9",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:54"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "10",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(MapEntry)15658_storage)dyn_storage": {
              "label": "struct EnumerableMap.MapEntry[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UintSet)16607_storage)": {
              "label": "mapping(address => struct EnumerableSet.UintSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes4,t_bool)": {
              "label": "mapping(bytes4 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_string_storage)": {
              "label": "mapping(uint256 => string)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Map)15666_storage": {
              "label": "struct EnumerableMap.Map",
              "members": [
                {
                  "label": "_entries",
                  "type": "t_array(t_struct(MapEntry)15658_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(MapEntry)15658_storage": {
              "label": "struct EnumerableMap.MapEntry",
              "members": [
                {
                  "label": "_key",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)16221_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)16607_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)16221_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintToAddressMap)15984_storage": {
              "label": "struct EnumerableMap.UintToAddressMap",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Map)15666_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC721": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Enumerable": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\IERC721Enumerable.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Metadata": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC721Receiver": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC777": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:29",
        "version": {
          "withMetadata": "76c7147043ca8c23a8323ca0ecf0de42f64e479de4db663d3042bc0d653d7a77",
          "withoutMetadata": "189e19651fb47f7f6f1ce4aced90f3131f2f065f440c1cf3099af73d5adce6fa",
          "linkedWithoutMetadata": "189e19651fb47f7f6f1ce4aced90f3131f2f065f440c1cf3099af73d5adce6fa"
        },
        "inherit": [
          "IERC20",
          "IERC777",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(string,string,address[])",
          "name()",
          "symbol()",
          "decimals()",
          "granularity()",
          "totalSupply()",
          "balanceOf(address)",
          "send(address,uint256,bytes)",
          "transfer(address,uint256)",
          "burn(uint256,bytes)",
          "isOperatorFor(address,address)",
          "authorizeOperator(address)",
          "revokeOperator(address)",
          "defaultOperators()",
          "operatorSend(address,address,uint256,bytes,bytes)",
          "operatorBurn(address,uint256,bytes,bytes)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC777",
            "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:69"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:35"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:37"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:39"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:40"
            },
            {
              "label": "_defaultOperatorsArray",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:54"
            },
            {
              "label": "_defaultOperators",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:57"
            },
            {
              "label": "_operators",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:60"
            },
            {
              "label": "_revokedDefaultOperators",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:61"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC777",
              "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\ERC777.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC777": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\IERC777.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "granularity()",
          "totalSupply()",
          "balanceOf(address)",
          "send(address,uint256,bytes)",
          "burn(uint256,bytes)",
          "isOperatorFor(address,address)",
          "authorizeOperator(address)",
          "revokeOperator(address)",
          "defaultOperators()",
          "operatorSend(address,address,uint256,bytes,bytes)",
          "operatorBurn(address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC777Recipient": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\IERC777Recipient.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokensReceived(address,address,address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC777Sender": {
        "src": "contracts\\@openzeppelin\\contracts\\token\\ERC777\\IERC777Sender.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokensToSend(address,address,address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\Address.sol:8",
        "version": {
          "withMetadata": "0ae5d4fe095b140f0c514a30fa70013f6381e1903e2abd400b1c1a3db6df5e0f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts\\@openzeppelin\\contracts\\utils\\Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Arrays": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\Arrays.sol:10",
        "version": {
          "withMetadata": "94c05001acd24a9768676694ee8bb97ee9134be5e1ac158dbf18a6e4781e0c5f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Counters": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\Counters.sol:18",
        "version": {
          "withMetadata": "a6b1376c12c2aab7a9761f45f3a581b8a1a285fe567acfb7606e04114c782477",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Create2": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\Create2.sol:14",
        "version": {
          "withMetadata": "44c53a81092b7313872c750b0965a4ff07a32e598691a0a5deaa6a29cba8fd61",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "EnumerableMap": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\EnumerableMap.sol:29",
        "version": {
          "withMetadata": "6249144b23fa5f90a331b7406849f6029b858b2e59ccfd3fc0e4d36f12e11e89",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "EnumerableSet": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\EnumerableSet.sol:29",
        "version": {
          "withMetadata": "4259827a01a2415716217a878c4e9b0132fe4397cc25fe89fcd2fb6dc3358e3a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Pausable": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ReentrancyGuard": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "contracts\\@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "contracts\\@openzeppelin\\contracts\\utils\\ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Strings": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\Strings.sol:8",
        "version": {
          "withMetadata": "9d285a76f7e020677213517aa49fd94bf79ccf087dd6ba0c22c8ff2460b6bf05",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "Address": {
        "src": "contracts\\Tetrad.sol:212",
        "version": {
          "withMetadata": "a16fdf8ecf4b135032ef41efb9e16faff67cac07b44279b2387521a6c87ef795",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "contracts\\Tetrad.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Tetrad": {
        "src": "contracts\\Tetrad.sol:585",
        "version": {
          "withMetadata": "166ebfd0a1e31782030fb43a4b6d17e7e9b36052250c842760f1173241381159",
          "withoutMetadata": "a94bbe6d1ca157cacea1790c747fd09c6b3c29e4a5be594404e2a0d4d20ab9a9",
          "linkedWithoutMetadata": "a94bbe6d1ca157cacea1790c747fd09c6b3c29e4a5be594404e2a0d4d20ab9a9"
        },
        "inherit": [
          "Ownable",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "isExcluded(address)",
          "setExcludeFromFee(address,bool)",
          "totalFees()",
          "deliver(uint256)",
          "reflectionFromToken(uint256,bool)",
          "tokenFromReflection(uint256)",
          "excludeAccount(address)",
          "includeAccount(address)",
          "isExcludedFromFee(address)",
          "manualSwap()",
          "manualSend()",
          "setSwapEnabled(bool)",
          "()",
          "_getETHBalance()",
          "_setTaxFee(uint256)",
          "_setTeamFee(uint256)",
          "_setTRADEWallet(address payable)",
          "_setMaxTxAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Tetrad",
            "src": "contracts\\Tetrad.sol:621"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_tTotal",
            "src": "contracts\\Tetrad.sol:595"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_rTotal",
            "src": "contracts\\Tetrad.sol:596"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\Tetrad.sol:598"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\Tetrad.sol:599"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\Tetrad.sol:600"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_taxFee",
            "src": "contracts\\Tetrad.sol:601"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_teamFee",
            "src": "contracts\\Tetrad.sol:602"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousTaxFee",
            "src": "contracts\\Tetrad.sol:603"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_previousTeamFee",
            "src": "contracts\\Tetrad.sol:604"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Router",
            "src": "contracts\\Tetrad.sol:607"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapV2Pair",
            "src": "contracts\\Tetrad.sol:608"
          },
          {
            "kind": "state-variable-assignment",
            "name": "inSwap",
            "src": "contracts\\Tetrad.sol:609"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Tetrad.sol:610"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\Tetrad.sol:611"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_numOfTokensToExchangeForTeam",
            "src": "contracts\\Tetrad.sol:613"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:338"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:339"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:340"
            },
            {
              "label": "_rOwned",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:588"
            },
            {
              "label": "_tOwned",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:589"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:590"
            },
            {
              "label": "_isExcludedFromFee",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:591"
            },
            {
              "label": "_isExcluded",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:592"
            },
            {
              "label": "_excluded",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_address)dyn_storage",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:593"
            },
            {
              "label": "_tTotal",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:595"
            },
            {
              "label": "_rTotal",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:596"
            },
            {
              "label": "_tFeeTotal",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:597"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "12",
              "type": "t_string_storage",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:598"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "13",
              "type": "t_string_storage",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:599"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "14",
              "type": "t_uint8",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:600"
            },
            {
              "label": "_taxFee",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:601"
            },
            {
              "label": "_teamFee",
              "offset": 0,
              "slot": "16",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:602"
            },
            {
              "label": "_previousTaxFee",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:603"
            },
            {
              "label": "_previousTeamFee",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:604"
            },
            {
              "label": "_TRADEWalletAddress",
              "offset": 0,
              "slot": "19",
              "type": "t_address_payable",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:605"
            },
            {
              "label": "_marketingWalletAddress",
              "offset": 0,
              "slot": "20",
              "type": "t_address_payable",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:606"
            },
            {
              "label": "inSwap",
              "offset": 20,
              "slot": "20",
              "type": "t_bool",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:609"
            },
            {
              "label": "swapEnabled",
              "offset": 21,
              "slot": "20",
              "type": "t_bool",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:610"
            },
            {
              "label": "_maxTxAmount",
              "offset": 0,
              "slot": "21",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:611"
            },
            {
              "label": "_numOfTokensToExchangeForTeam",
              "offset": 0,
              "slot": "22",
              "type": "t_uint256",
              "contract": "Tetrad",
              "src": "contracts\\Tetrad.sol:613"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "contracts\\Tetrad.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\Tetrad.sol:401",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts\\Tetrad.sol:412",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\Tetrad.sol:454",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\Tetrad.sol:545",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "contracts\\Tetrad.sol:337",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)",
          "geUnlockTime()",
          "lock(uint256)",
          "unlock()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\Tetrad.sol:345"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:338"
            },
            {
              "label": "_previousOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:339"
            },
            {
              "label": "_lockTime",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "Ownable",
              "src": "contracts\\Tetrad.sol:340"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "SafeMath": {
        "src": "contracts\\Tetrad.sol:82",
        "version": {
          "withMetadata": "3055e6d3d011270f587dd61b2b31eae3b78e342e629a826996c8a742b2e46492",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "SignedSafeMath": {
        "src": "contracts\\@openzeppelin\\contracts\\math\\SignedSafeMath.sol:9",
        "version": {
          "withMetadata": "e551e0f60750f88ebea1ab43a1621f99278140c3bf03ee2e4c569fce230d89fd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SignedSafeMathMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SignedSafeMathMock.sol:7",
        "version": {
          "withMetadata": "4722ab7dacdc9eb3d52f3f89766ae644e6e00f8659a1f7e5948450d83c6672f8",
          "withoutMetadata": "f3942bb0d1857b55348ade780e4e2f6d99b93c93930e1da9de6599c287359a05",
          "linkedWithoutMetadata": "f3942bb0d1857b55348ade780e4e2f6d99b93c93930e1da9de6599c287359a05"
        },
        "inherit": [],
        "libraries": [
          "SignedSafeMath"
        ],
        "methods": [
          "mul(int256,int256)",
          "div(int256,int256)",
          "sub(int256,int256)",
          "add(int256,int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "EtherReceiverMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\EtherReceiverMock.sol:5",
        "version": {
          "withMetadata": "22ec42cfad46991bdb0f10ced3a5430cdacf4b0e1cfacf92c88d5c26c051cf89",
          "withoutMetadata": "0ba4b255589edd9a68fb5e5d981245be695b52377736469ff6c4bac16282c519",
          "linkedWithoutMetadata": "0ba4b255589edd9a68fb5e5d981245be695b52377736469ff6c4bac16282c519"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAcceptEther(bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_acceptEther",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "EtherReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\EtherReceiverMock.sol:6"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "MerkleProof": {
        "src": "contracts\\@openzeppelin\\contracts\\cryptography\\MerkleProof.sol:8",
        "version": {
          "withMetadata": "50b0db39b5e244d58cb5142ca6496cb0bbe672325abe6be3cfde77c8db0f89bd",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MerkleProofWrapper": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\MerkleProofWrapper.sol:7",
        "version": {
          "withMetadata": "9e44bed6c6cedea54c743cd656f5741717f44484fef3e72df07306922af19c47",
          "withoutMetadata": "aebb2c77cd033b230bc456a3c683c9b961d14c58eb8cb3ff876711a7b5c7e86e",
          "linkedWithoutMetadata": "aebb2c77cd033b230bc456a3c683c9b961d14c58eb8cb3ff876711a7b5c7e86e"
        },
        "inherit": [],
        "libraries": [
          "MerkleProof"
        ],
        "methods": [
          "verify(bytes32[],bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "CallReceiverMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\CallReceiverMock.sol:5",
        "version": {
          "withMetadata": "887913b25e242dc4058fcf23bbc40f8cb7a8ada33bf638458360cde708bcd1d9",
          "withoutMetadata": "bf31ad3b65adf3a8313f53a9c45f3d3cd8e82fa8dd3f654b84bcfd2a342dfd56",
          "linkedWithoutMetadata": "bf31ad3b65adf3a8313f53a9c45f3d3cd8e82fa8dd3f654b84bcfd2a342dfd56"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "mockFunction()",
          "mockFunctionNonPayable()",
          "mockStaticFunction()",
          "mockFunctionRevertsNoReason()",
          "mockFunctionRevertsReason()",
          "mockFunctionThrows()",
          "mockFunctionOutOfGas()",
          "mockFunctionWritesStorage()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "sharedAnswer",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "CallReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\CallReceiverMock.sol:6"
            },
            {
              "label": "_array",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "CallReceiverMock",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\CallReceiverMock.sol:10"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "ERC165Checker": {
        "src": "contracts\\@openzeppelin\\contracts\\introspection\\ERC165Checker.sol:12",
        "version": {
          "withMetadata": "0862a6d1231cbd7c151d62ce379500fb9e4f0c13b4380432b3bbf1ab9cf8d685",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ERC165CheckerMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165CheckerMock.sol:7",
        "version": {
          "withMetadata": "c4f317181b407ebe58b6177b19292620f177e4a6b9fab33394b58280e95c1def",
          "withoutMetadata": "62d266a4cf9845a739625e463b3aed6a7cae71b5cbaedc56033678ea2d0a0d33",
          "linkedWithoutMetadata": "62d266a4cf9845a739625e463b3aed6a7cae71b5cbaedc56033678ea2d0a0d33"
        },
        "inherit": [],
        "libraries": [
          "ERC165Checker"
        ],
        "methods": [
          "supportsERC165(address)",
          "supportsInterface(address,bytes4)",
          "supportsAllInterfaces(address,bytes4[])",
          "getSupportedInterfaces(address,bytes4[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "BadBeaconNoImpl": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\BadBeacon.sol:5",
        "version": {
          "withMetadata": "8522561c172cafd698133fa0119953927dbd62e6565f8cefa62e96f45377d4cf",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "BadBeaconNotContract": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\BadBeacon.sol:8",
        "version": {
          "withMetadata": "d4a14219105324c055ce487f889a975522036dccc23f59ddabed8f1aba05d070",
          "withoutMetadata": "8b811ce4dd4bf256a030f3defcf648a4996148a7caaf3b2b54d151eaee80768a",
          "linkedWithoutMetadata": "8b811ce4dd4bf256a030f3defcf648a4996148a7caaf3b2b54d151eaee80768a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "DummyImplementation": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:9",
        "version": {
          "withMetadata": "7b3110aeb6d803246d7d17b2cea73f07110c1864e88ecf9b981d9a48accf48f9",
          "withoutMetadata": "e9e0a3deb0c691906ca799e5604bcdcb090e2b6f759dcc92ade6bd46284b762c",
          "linkedWithoutMetadata": "e9e0a3deb0c691906ca799e5604bcdcb090e2b6f759dcc92ade6bd46284b762c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "initializeNonPayable()",
          "initializePayable()",
          "initializeNonPayableWithValue(uint256)",
          "initializePayableWithValue(uint256)",
          "initialize(uint256,string,uint256[])",
          "get()",
          "version()",
          "reverts()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "value",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "DummyImplementation",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:10"
            },
            {
              "label": "text",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DummyImplementation",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:11"
            },
            {
              "label": "values",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "DummyImplementation",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:12"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "DummyImplementationV2": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:49",
        "version": {
          "withMetadata": "fdbf04a755f529298d894895a394468314bbb1ca8bbfca2670303ce6bf62cf22",
          "withoutMetadata": "3badc4fb83edb03a66fb4df62d5725f47a3b33116f04397ce341e2333343a245",
          "linkedWithoutMetadata": "3badc4fb83edb03a66fb4df62d5725f47a3b33116f04397ce341e2333343a245"
        },
        "inherit": [
          "DummyImplementation"
        ],
        "libraries": [],
        "methods": [
          "migrate(uint256)",
          "version()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "value",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "DummyImplementation",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:10"
            },
            {
              "label": "text",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "DummyImplementation",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:11"
            },
            {
              "label": "values",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "DummyImplementation",
              "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:12"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "Impl": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\DummyImplementation.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "version()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "ClashingImplementation": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ClashingImplementation.sol:11",
        "version": {
          "withMetadata": "2addae8a05de242498f3a13b75f4fcca9a7e39da250d7156f479afc9a9b73428",
          "withoutMetadata": "d0120f3252c06a7fa7683d5c68918505e73d47f5ee77b3b9b48683f09a83bee1",
          "linkedWithoutMetadata": "d0120f3252c06a7fa7683d5c68918505e73d47f5ee77b3b9b48683f09a83bee1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "delegatedFunction()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "SafeCastMock": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\SafeCastMock.sol:7",
        "version": {
          "withMetadata": "6ec268b1e76b02fb9e0fab45bb71d49f18236e094f08a8d3af561337068ea44c",
          "withoutMetadata": "f134841aca76666e85e4e3183011fd706df8a945ed867e0188590aa6a4093b29",
          "linkedWithoutMetadata": "f134841aca76666e85e4e3183011fd706df8a945ed867e0188590aa6a4093b29"
        },
        "inherit": [],
        "libraries": [
          "SafeCast"
        ],
        "methods": [
          "toUint256(int256)",
          "toInt256(uint256)",
          "toUint128(uint256)",
          "toUint64(uint256)",
          "toUint32(uint256)",
          "toUint16(uint256)",
          "toUint8(uint256)",
          "toInt128(int256)",
          "toInt64(int256)",
          "toInt32(int256)",
          "toInt16(int256)",
          "toInt8(int256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeCast": {
        "src": "contracts\\@openzeppelin\\contracts\\utils\\SafeCast.sol:21",
        "version": {
          "withMetadata": "7cba2738190d4107b4657273eea2fd9548497060ec330f4593a8fd9edf73d181",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    },
    {
      "ERC165NotSupported": {
        "src": "contracts\\@openzeppelin\\contracts\\mocks\\ERC165\\ERC165NotSupported.sol:5",
        "version": {
          "withMetadata": "47ae5edfcc5183692e5a4c85b24df2806e9ab5aa1e27766f501a97eab06ca5bc",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    }
  ]
}